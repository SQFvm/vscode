{
    "fn_setMirrorDisplay": {
        "id": "1511399",
        "title": "fn_setMirrorDisplay",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_setMirrorDisplay",
        "example": "",
        "syntax": "",
        "docSyntax": "[type, enable] call fn_setMirrorDisplay",
        "parameters": [
            "type: String - Can be \"horizontal\", \"vertical\", or \"both\".",
            "enable: Boolean - Set to true to enable mirroring, false to disable it."
        ],
        "return_value": ["Nothing"]
    },
    "fn_tow_canHitch": {
        "id": "1510042",
        "title": "fn_tow_canHitch",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_canHitch",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent, child] call fn_tow_canHitch",
        "parameters": [
            "parent: Object - Parent vehicle / object to hitch to.",
            "child: Object - Child vehicle / object to be hitched."
        ],
        "return_value": [" Boolean - Returns true if can be hitched, false if cannot. "]
    },
    "fn_tow_canTow": {
        "id": "1510043",
        "title": "fn_tow_canTow",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_canTow",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent, child, type, length] call fn_tow_canTow",
        "parameters": [
            "parent: Object - Parent vehicle / object to tow with.",
            "child: Object - Vehicle to be towed.",
            "type: String - (Optional) Towing mode. The supported values are: \"TOWBAR\", \"CUSTOM\", \"ROPETOW\" (default: \"TOWBAR\").",
            "length: Number - (Optional) Maximum rope length (default: -1 automatic, depends on type)."
        ],
        "return_value": [" Boolean - Returns true when can tow, false when cannot. "]
    },
    "fn_tow_getAvailableTowPoints": {
        "id": "1510040",
        "title": "fn_tow_getAvailableTowPoints",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_getAvailableTowPoints",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle] call fn_tow_getAvailableTowPoints",
        "parameters": ["vehicle: Object - Vehicle or its trailer for which the towing points are returned."],
        "return_value": [
            "connectionN: Array - [vehicle, towPoint] - Object reference and memory point name: vehicle: Object - Object that is the memory point owner. towPoint: String - Memory point name.",
            "vehicle: Object - Object that is the memory point owner.",
            "towPoint: String - Memory point name."
        ]
    },
    "fn_tow_getRopeTowConnections": {
        "id": "1510041",
        "title": "fn_tow_getRopeTowConnections",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_getRopeTowConnections",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle] call fn_tow_getRopeTowConnections",
        "parameters": ["vehicle: Object - Vehicle or its trailer for which rope towing connections are returned."],
        "return_value": [
            "connectionN: Array - [vehicle, connectionData] - Object reference and rope connection: vehicle: Object - Connection owner object: connectionData: Array - [ropeID, parentObject, parentMemPoint, childObject, childMemPoint] - Rope connection data: ropeID: Number - Unique rope ID number. parentObject: Object - Object that is towing. parentMemPoint: String - Name of memory point that the rope begins at. childObject: Object - Object that is being towed. childMemPoint: String - Name of memory point that the rope ends at.",
            "vehicle: Object - Connection owner object: connectionData: Array - [ropeID, parentObject, parentMemPoint, childObject, childMemPoint] - Rope connection data: ropeID: Number - Unique rope ID number. parentObject: Object - Object that is towing. parentMemPoint: String - Name of memory point that the rope begins at. childObject: Object - Object that is being towed. childMemPoint: String - Name of memory point that the rope ends at.",
            "connectionData: Array - [ropeID, parentObject, parentMemPoint, childObject, childMemPoint] - Rope connection data: ropeID: Number - Unique rope ID number. parentObject: Object - Object that is towing. parentMemPoint: String - Name of memory point that the rope begins at. childObject: Object - Object that is being towed. childMemPoint: String - Name of memory point that the rope ends at.",
            "ropeID: Number - Unique rope ID number.",
            "parentObject: Object - Object that is towing.",
            "parentMemPoint: String - Name of memory point that the rope begins at.",
            "childObject: Object - Object that is being towed.",
            "childMemPoint: String - Name of memory point that the rope ends at."
        ]
    },
    "fn_tow_setPointLocked": {
        "id": "1510038",
        "title": "fn_tow_setPointLocked",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_setPointLocked",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, point, lock] call fn_tow_setPointLocked",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "point: String - Name of memory point to set in locked state.",
            "lock: Boolean - Determines whether to add (true) or remove (false) the memory point from the locked points array."
        ],
        "return_value": [" Nothing "]
    },
    "fn_tow_startHitch": {
        "id": "1510039",
        "title": "fn_tow_startHitch",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_startHitch",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent, child, mode, exceptions] call fn_tow_startTow",
        "parameters": [
            "parent: Object - Parent vehicle / object to tow with.",
            "child: Object - Vehicle to be towed.",
            "mode: Number - (Optional) Determines the script mode to hitch in. The supported values are: 0 - timed, 1 - instant (default: 0 - timed).",
            "exceptions: Boolean - (Optional) Determines whether the code should throw an exception upon an error (default: false)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_tow_startRopeTow": {
        "id": "1510036",
        "title": "fn_tow_startRopeTow",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_startRopeTow",
        "example": "",
        "syntax": "",
        "docSyntax": "[parentConnection, childConnection, ropeLength] call fn_tow_startRopeTow",
        "parameters": [
            "parentConnection: Array - [parentVeh, parentMemPoint] - Parent connection data. Use fn tow getAvailableTowPoints to find out possible values: parentVeh: Object - Parent vehicle. parentMemPoint: String - Name of memory point to connect the rope to.",
            "parentVeh: Object - Parent vehicle.",
            "parentMemPoint: String - Name of memory point to connect the rope to.",
            "childConnection: Array - [childVeh, childMemPoint] - Child connection data. Use fn tow getAvailableTowPoints to find out possible values: childVeh: Object - Child vehicle. childMemPoint: String - Name of memory point to connect the rope to.",
            "childVeh: Object - Child vehicle.",
            "childMemPoint: String - Name of memory point to connect the rope to.",
            "ropeLength: Number - (Optional) Approximate length (in meters) of the rope to use for the connection. Negative or zero values mean automatic length (default: -1).",
            "exceptions: Boolean - (Optional) Determines whether the code should throw an exception upon an error (default: false)."
        ],
        "return_value": [" ropeID: Number - Unique ID of the created rope. "]
    },
    "fn_tow_startTow": {
        "id": "1510037",
        "title": "fn_tow_startTow",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_startTow",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent, child, type, mode, exceptions] call fn_tow_startTow",
        "parameters": [
            "parent: Object - Parent vehicle / object to tow with.",
            "child: Object - Vehicle to be towed.",
            "type: String - (Optional) Towing mode. The supported values are: \"CUSTOM\", \"ROPETOW\" (default: \"TOWBAR\").",
            "mode: Number - (Optional) Determines the mode for custom towing. The supported values are: 0 - timed, 1 - instant (default: 0 - timed).",
            "exceptions: Boolean - (Optional) Determines whether the code should throw an exception upon an error (default: false)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_tow_stopHitch": {
        "id": "1510066",
        "title": "fn_tow_stopHitch",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_stopHitch",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent, child, mode, exceptions, spawned] call fn_tow_stopHitch",
        "parameters": [
            "parent: Object - Parent vehicle / object to tow with.",
            "child: Object - Child vehicle / object to disconnect (default: objNull - automatic).",
            "mode: Number - (Optional) Determines the script mode to unhitch in. The supported values are: 0 - timed, 1 - instant (default: 0 - timed).",
            "exceptions: Boolean - (Optional) Determines whether the function should throw an exception upon an error (default: false).",
            "spawned: Boolean - (Optional) Determines whether the function is safe for running timed code, including waitUntil and sleep (default: false)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_tow_stopRopeTow": {
        "id": "1510067",
        "title": "fn_tow_stopRopeTow",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_stopRopeTow",
        "example": "",
        "syntax": "",
        "docSyntax": "[parentConnection, childConnection, exceptions] call fn_tow_stopRopeTow",
        "parameters": [
            "parentConnection: Array - [parentVeh, parentMemPoint] - Parent connection data. Use fn tow getRopeTowConnections to find out possible values: parentVeh: Object - Parent vehicle. parentMemPoint: String - Name of memory point that the rope is connected to.",
            "parentVeh: Object - Parent vehicle.",
            "parentMemPoint: String - Name of memory point that the rope is connected to.",
            "childConnection: Array - [childVeh, childMemPoint] - Child connection data. Use fn tow getRopeTowConnections to find out possible values: childVeh: Object - Child vehicle. childMemPoint: String - Name of memory point that the rope is connected to.",
            "childVeh: Object - Child vehicle.",
            "childMemPoint: String - Name of memory point that the rope is connected to.",
            "exceptions: Boolean - (Optional) Determines whether the code should throw an exception upon an error (default: false)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_tow_stopTow": {
        "id": "1510064",
        "title": "fn_tow_stopTow",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_stopTow",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent, child, type, mode, spawned] call fn_tow_stopTow",
        "parameters": [
            "parent: Object - Parent vehicle / object to tow with.",
            "child: Object - (Optional) Child vehicle / object to disconnect (default: objNull - automatic).",
            "type: String - (Optional) Enforce towing method to use (default: \"\" - automatic).",
            "mode: Number - (Optional) Determines the mode for custom towing. The supported values are: 0 - timed, 1 - instant (default: 0 - timed).",
            "spawned: Boolean - (Optional) Determines whether the function is safe for running timed code, including waitUntil and sleep (default: false)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_tow_towChild": {
        "id": "1510065",
        "title": "fn_tow_towChild",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_towChild",
        "example": "",
        "syntax": "",
        "docSyntax": "[parent] call fn_tow_towChild",
        "parameters": ["parent: Object - The towing vehicle, for which the child (towed) vehicle is returned."],
        "return_value": [
            "Object - Towed vehicle.",
            "String - Type of towing. Typical values are: \"\", \"TOWBAR\", \"CUSTOM\", \"ROPETOW\"."
        ]
    },
    "fn_tow_towParent": {
        "id": "1510062",
        "title": "fn_tow_towParent",
        "version": "17.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_tow_towParent",
        "example": "",
        "syntax": "",
        "docSyntax": "[child] call fn_tow_towParent",
        "parameters": ["child: Object - The child vehicle that is being towed."],
        "return_value": [
            "Object - Parent vehicle.",
            "String - Type of towing. Typical values are: \"\", \"TOWBAR\", \"CUSTOM\", \"ROPETOW\"."
        ]
    },
    "fn_vbs_aar_recordStart": {
        "id": "1510063",
        "title": "fn_vbs_aar_recordStart",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aar_recordStart",
        "example": "",
        "syntax": "",
        "docSyntax": "call fn_vbs_aar_recordStart",
        "parameters": ["None"],
        "return_value": ["Nothing"]
    },
    "fn_vbs_aboveGround": {
        "id": "1510060",
        "title": "fn_vbs_aboveGround",
        "version": "1.21",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aboveGround",
        "example": "",
        "syntax": "",
        "docSyntax": "[position, maxheight, radius] call fn_vbs_aboveGround",
        "parameters": [
            "position: Position2D or Position3D - Position to check.",
            "maxheight: Number - (Optional) Indicates from which maximum height to check (default: 20 meters).",
            "radius: Number - (Optional) Radius to check in (default: 1 meter)."
        ],
        "return_value": ["Number - Height above ground."]
    },
    "fn_vbs_absSpeed": {
        "id": "1510061",
        "title": "fn_vbs_absSpeed",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_absSpeed",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_absSpeed",
        "parameters": ["vehicle: Object - Vehicle whose absolute speed is checked."],
        "return_value": ["Number"]
    },
    "fn_vbs_addActionEx": {
        "id": "1510058",
        "title": "fn_vbs_addActionEx",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_addActionEx",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, [parameters]] call fn_vbs_addActionEx",
        "parameters": [
            "unit: Object or Array - Unit (or [unit,id]).",
            "parameters: Array - Array that is passed to the right side of the addAction command (see addAction for details)."
        ],
        "return_value": ["Number - Index of action (for use in fn vbs removeActionEx)."]
    },
    "fn_vbs_addonExists": {
        "id": "1510059",
        "title": "fn_vbs_addonExists",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_addonExists",
        "example": "",
        "syntax": "",
        "docSyntax": "[addonName] call fn_vbs_addonExists",
        "parameters": ["addonName: String - The name of the addon."],
        "return_value": ["Boolean - Returns true if the addon exists, false otherwise."]
    },
    "fn_vbs_addSysEventHandler": {
        "id": "1510056",
        "title": "fn_vbs_addSysEventHandler",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_addSysEventHandler",
        "example": "",
        "syntax": "",
        "docSyntax": "[type, code, params] call fn_vbs_addSysEventHandler",
        "parameters": [
            "type: String - Type of event handler to add.",
            "code: Code or String - Code that should be executed once the event occurs.",
            "params: Anything - Data to pass to the code in the _data variable"
        ],
        "return_value": [
            "Number - Index of added event. Note that the same index can be used again, after the events are removed."
        ]
    },
    "fn_vbs_addSystemItem": {
        "id": "1510057",
        "title": "fn_vbs_addSystemItem",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_addSystemItem",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, parentItemID, itemType, itemName, itemTooltip] call fn_vbs_addSystemItem",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "parentItemID: Number - The parent system item ID.",
            "itemType: Number - The type of the item, can be (you must add #include \"\\vbs2\\plugins\\vehicle_systems\\systemTypes.hpp\" for those defines to be available):SYSTEM_TYPE_ITEM 0SYSTEM_TYPE_TOGGLE 1SYSTEM_TYPE_SUBMENU 2",
            "SYSTEM_TYPE_ITEM 0",
            "SYSTEM_TYPE_TOGGLE 1",
            "SYSTEM_TYPE_SUBMENU 2",
            "itemName: String - The item name.",
            "itemTooltip: String - The item tooltip (optional, default: \"\")."
        ],
        "return_value": ["Number - The item ID, or -1 if the parent item does not exist."]
    },
    "fn_vbs_addWaypointOME": {
        "id": "1510054",
        "title": "fn_vbs_addWaypointOME",
        "version": "1.65",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_addWaypointOME",
        "example": "",
        "syntax": "",
        "docSyntax": "[group, position, type] call fn_vbs_addWaypointOME",
        "parameters": [
            "group: Group - The group to add the waypoint to.",
            "position: Position - Data Type - The position at which to place the waypoint.",
            "type: String - The type of waypoint to add (for example, \"MOVE\")."
        ],
        "return_value": ["Editor Object - The Editor Object of the newly created waypoint."]
    },
    "fn_vbs_alignTurret": {
        "id": "1510055",
        "title": "fn_vbs_alignTurret",
        "version": "1.50",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_alignTurret",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, target, source, disabled] call fn_vbs_alignTurret",
        "parameters": [
            "vehicle: Object - Vehicle with turrets.",
            "target: Array or Object - Turret path or unit manning the turret.",
            "source: Array or Object - Turret path or unit manning the turret.",
            "disabled: Boolean - Whether gunner input has already been disabled, using disableGunnerInput."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_allowDamage": {
        "id": "1510052",
        "title": "fn_vbs_allowDamage",
        "version": "17.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_allowDamage",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, allow] call fn_vbs_allowDamage",
        "parameters": [
            "vehicle: Object - Vehicle whose parts can / cannot be damaged.",
            "allow: Boolean - If set to: true - Damage is allowed. false - Damage is not allowed (default).",
            "true - Damage is allowed.",
            "false - Damage is not allowed (default)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_vbs_allUnitsInCoC": {
        "id": "1510053",
        "title": "fn_vbs_allUnitsInCoC",
        "version": "3.5",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_allUnitsInCoC",
        "example": "",
        "syntax": "",
        "docSyntax": "leader call fn_vbs_allUnitsInCoC",
        "parameters": ["leader: Object - Unit to check."],
        "return_value": ["Array of Object - Lead unit, plus any subordinates."]
    },
    "fn_vbs_angleDiff": {
        "id": "1510082",
        "title": "fn_vbs_angleDiff",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_angleDiff",
        "example": "",
        "syntax": "",
        "docSyntax": "[angle1, angle2] call fn_vbs_angleDiff",
        "parameters": ["angle1: Number - First angle.", "angle2: Number - Second angle."],
        "return_value": ["Number"]
    },
    "fn_vbs_animateIWA": {
        "id": "1510083",
        "title": "fn_vbs_animateIWA",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_animateIWA",
        "example": "",
        "syntax": "",
        "docSyntax": "[target, animation, phase, continuous] call fn_vbs_animateIWA",
        "parameters": [
            "target: Object - Object to be animated.",
            "animation: String - Name of animation to run.",
            "phase: Number - Target phase animation should run until (0-1).",
            "continuous: Boolean - Optional (default: true). If false, animation only runs for one frame. If true, it runs until target phase is reached (or is changed to a new target)."
        ],
        "return_value": [
            "Boolean - Returns true if animation is started; false if the animation does not exist or is not configured for IWA."
        ]
    },
    "fn_vbs_animation_active": {
        "id": "1510080",
        "title": "fn_vbs_animation_active",
        "version": "1.50",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_animation_active",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_animation_active",
        "parameters": ["unit: Object - Unit to check."],
        "return_value": ["Boolean - If true, then unit is currently performing a complex animation."]
    },
    "fn_vbs_animation_status": {
        "id": "1510081",
        "title": "fn_vbs_animation_status",
        "version": "1.50",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_animation_status",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_animation_status",
        "parameters": ["unit: Object - Unit to check."],
        "return_value": [
            "\"INACTIVE\" - Not involved in a complex animation.",
            "\"MOVETO\" - While moving towards a specified animation destination.",
            "\"TURNTO\" - While turning towards another actor.",
            "\"ANIMATE\" - During the animation phase."
        ]
    },
    "fn_vbs_areEqual": {
        "id": "1510078",
        "title": "fn_vbs_areEqual",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_areEqual",
        "example": "",
        "syntax": "",
        "docSyntax": "comparelist call fn_vbs_areEqual",
        "parameters": ["comparelist: Array - Array of Anything."],
        "return_value": ["Boolean"]
    },
    "fn_vbs_arithmeticMean": {
        "id": "1510079",
        "title": "fn_vbs_arithmeticMean",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arithmeticMean",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_arithmeticMean",
        "parameters": ["array: Array - Array of numbers."],
        "return_value": ["Number"]
    },
    "fn_vbs_arrayAdd": {
        "id": "1510076",
        "title": "fn_vbs_arrayAdd",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayAdd",
        "example": "",
        "syntax": "",
        "docSyntax": "[array1, array2] call fn_vbs_arrayAdd",
        "parameters": ["baseArray: Array - Array that is added to", "addedArray: Array - Array to be added."],
        "return_value": ["Array"]
    },
    "fn_vbs_arrayCompare": {
        "id": "1510077",
        "title": "fn_vbs_arrayCompare",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayCompare",
        "example": "",
        "syntax": "",
        "docSyntax": "[array1, array2] call fn_vbs_arrayCompare",
        "parameters": ["array1: Array - First array.", "array2: Array - Second array."],
        "return_value": ["Boolean"]
    },
    "fn_vbs_arrayFindDeep": {
        "id": "1510074",
        "title": "fn_vbs_arrayFindDeep",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayFindDeep",
        "example": "",
        "syntax": "",
        "docSyntax": "[array,element] call fn_vbs_arrayFindDeep",
        "parameters": ["array: Array - Array to search.", "element: Anything - Element to search for."],
        "return_value": ["Array - Path to the element in the array, or [] if the element is not in the array."]
    },
    "fn_vbs_arrayInsert": {
        "id": "1510075",
        "title": "fn_vbs_arrayInsert",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayInsert",
        "example": "",
        "syntax": "",
        "docSyntax": "[baseArray, insertArray, index] call fn_vbs_arrayInsert",
        "parameters": [
            "baseArray: Array - Array to insert into.",
            "insertArray: Array - Array to insert into baseArray.",
            "index: Number - Index at which to insert insertArray."
        ],
        "return_value": ["Array"]
    },
    "fn_vbs_arrayInsertOrdered": {
        "id": "1510072",
        "title": "fn_vbs_arrayInsertOrdered",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayInsertOrdered",
        "example": "",
        "syntax": "",
        "docSyntax": "[baseArray, insert, ascending] call fn_vbs_arrayInsertOrdered",
        "parameters": [
            "baseArray: Array - Array to insert into.",
            "insert: Number - Element to insert.",
            "ascending: Boolean - Whether the baseArray order is ascending (true) or descending (false) (optional, default: true)."
        ],
        "return_value": ["Array - Original array, with new element added."]
    },
    "fn_vbs_arrayInterpolate": {
        "id": "34243042",
        "title": "fn_vbs_arrayInterpolate",
        "version": "VBS3 20.2.0, VBS4 20.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayInterpolate",
        "example": "",
        "syntax": "",
        "docSyntax": "[valuesArray, targetValue, optType] call fn_vbs_arrayInterpolate",
        "parameters": [
            "valuesArray:\u00a0Array of\u00a0Number - An array of numeric values.",
            "targetValue:\u00a0Number - Interpolation target value.",
            "optType:\u00a0String - Interpolation type. Can be:\"linear\" - Linear interpolation (default).\"cosine\" - Cosine interpolation.\"cubic\" - Cubic interpolation.",
            "\"linear\" - Linear interpolation (default).",
            "\"cosine\" - Cosine interpolation.",
            "\"cubic\" - Cubic interpolation."
        ],
        "return_value": ["Number - Interpolation result value."]
    },
    "fn_vbs_arrayPop": {
        "id": "1510073",
        "title": "fn_vbs_arrayPop",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayPop",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_arrayPop",
        "parameters": ["array: Array - Array to remove from."],
        "return_value": ["Anything - Element removed from the rightmost side of the array."]
    },
    "fn_vbs_arrayPopStack": {
        "id": "1510070",
        "title": "fn_vbs_arrayPopStack",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayPopStack",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, removenum] call fn_vbs_arrayPopStack",
        "parameters": [
            "array: Array - Array to modify.",
            "removenum: Number - How many elements to remove from the right."
        ],
        "return_value": ["Array - Elements removed from the array."]
    },
    "fn_vbs_arrayPush": {
        "id": "1510071",
        "title": "fn_vbs_arrayPush",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayPush",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, element] call fn_vbs_arrayPush",
        "parameters": ["array: Array - Original array.", "element: Anything - Element added to the end of array."],
        "return_value": ["Array - Note that array is also modified by reference."]
    },
    "fn_vbs_arrayPushStack": {
        "id": "1510068",
        "title": "fn_vbs_arrayPushStack",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayPushStack",
        "example": "",
        "syntax": "",
        "docSyntax": "[array1, array2] call fn_vbs_arrayPushStack",
        "parameters": ["array1: Array - First array.", "array2: Array - Second array."],
        "return_value": ["Array - array1 is also modified by reference."]
    },
    "fn_vbs_arraySetDeep": {
        "id": "1510069",
        "title": "fn_vbs_arraySetDeep",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arraySetDeep",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, path, element] call fn_vbs_arraySetDeep",
        "parameters": [
            "array: Array - The array you want to change.",
            "path: Array - Path to the element you want to change.",
            "element: Anything - The element you want to set."
        ],
        "return_value": ["Array"]
    },
    "fn_vbs_arrayShift": {
        "id": "1510098",
        "title": "fn_vbs_arrayShift",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayShift",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_arrayShift",
        "parameters": [
            "array: Array - Array to remove from.Note: Before V1.30, the array must be encased in brackets (in other words, the array must be in an array)."
        ],
        "return_value": ["Array - Element removed from left of the array."]
    },
    "fn_vbs_arrayShiftStack": {
        "id": "1510099",
        "title": "fn_vbs_arrayShiftStack",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayShiftStack",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, removenum] call  fn_vbs_arrayShiftStack",
        "parameters": [
            "array: Array - Array to modify",
            "removenum: Number - How many elements to remove from the left"
        ],
        "return_value": [" Array - Elements removed from the array"]
    },
    "fn_vbs_arrayUnShift": {
        "id": "1510096",
        "title": "fn_vbs_arrayUnShift",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayUnShift",
        "example": "",
        "syntax": "",
        "docSyntax": "[array1, element] call  fn_vbs_arrayUnShift",
        "parameters": [
            "array1: Array - Original array",
            "element: Anything - Element added to the beginning of array1"
        ],
        "return_value": [" Array - Note that array1 is also modified by reference"]
    },
    "fn_vbs_arrayUnShiftStack": {
        "id": "1510097",
        "title": "fn_vbs_arrayUnShiftStack",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_arrayUnShiftStack",
        "example": "",
        "syntax": "",
        "docSyntax": "[array,stack] call  fn_vbs_arrayUnShiftStack",
        "parameters": [
            "array1: Array - Array to be added to",
            "stack: Array - Elements to be added to the beginning of array1"
        ],
        "return_value": [" Array - Note, array1 is also modified by reference "]
    },
    "fn_vbs_artilleryStrike": {
        "id": "1510094",
        "title": "fn_vbs_artilleryStrike",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_artilleryStrike",
        "example": "",
        "syntax": "",
        "docSyntax": "[ammo, position, radius, rounds, guns, delay, reload, start, plane, planeDir, condition] call fn_vbs_artilleryStrike",
        "parameters": [
            "ammo: String - Type of ordinance to fire. Can be:\"mortar_60_he\"\"mortar_81_he\"\"mortar_120_he\"\"arty_105_he\"\"arty_105_dpicm\"\"arty_105_sarin_gas\"\"arty_155_he\"\"arty_155_dpicm\"\"Illumination\"\"Smoke\"\"bomb_1000\"\"bomb_4000\"\"bomb_5000\"",
            "\"mortar_60_he\"",
            "\"mortar_81_he\"",
            "\"mortar_120_he\"",
            "\"arty_105_he\"",
            "\"arty_105_dpicm\"",
            "\"arty_105_sarin_gas\"",
            "\"arty_155_he\"",
            "\"arty_155_dpicm\"",
            "\"Illumination\"",
            "\"Smoke\"",
            "\"bomb_1000\"",
            "\"bomb_4000\"",
            "\"bomb_5000\"",
            "position: Position3D or String - Center of artillery strike. Can be a string, for grid coordinates.",
            "radius: Number - Maximum distance from the center where the ordinance is fired.",
            "rounds: Number - Number of rounds each gun fires.",
            "guns: Number - Number of guns that fire.",
            "delay: Number - Delay (in seconds) between each gun firing.",
            "reload: Number - Delay (in seconds) between volleys.",
            "start: Number - Delay (in seconds) before first strike (optional, default: 0).",
            "plane: String - Class name of plane to spawn, which delivers the payload (optional, default: \"\" - no plane) (V3.7+)",
            "planeDir: Number - Direction from which the delivery plane should approach from (optional, default: 0) (V3.7+)",
            "condition: String - Script command (or variable) which should return true, for the strike to start (optional, default: \"true\") (V3.7+)"
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_aw_addWound": {
        "id": "1510095",
        "title": "fn_vbs_aw_addWound",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_addWound",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, type, severity, bodypart, [overallDamage, localDamage, applyDamage]] call fn_vbs_aw_addWound",
        "parameters": [
            "unit: Object - Soldier to receive the wound.",
            "type: String or Number - Name or ID of type to create.",
            "severity: String or Number - Name or ID of severity.",
            "bodypart: String or Number - Name or ID of bodypart to affect.",
            "overallDamage: Number - Amount of overall damage that should be applied (0 to 1). If -1, then the appropriate damage level is read from the wound configuration.",
            "localDamage: Number - Amount of hitzone-specific damage that should be applied (0 to 1). If -1. then the appropriate damage level is read from the wound configuration.",
            "applyDamage: Boolean - If false, the wound information is only stored (for later reference), but no actual damage is applied to the unit (optional, default: true)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_aw_compareWounds": {
        "id": "1510092",
        "title": "fn_vbs_aw_compareWounds",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_compareWounds",
        "example": "",
        "syntax": "",
        "docSyntax": "[wound1, wound2] call fn_vbs_aw_compareWounds",
        "parameters": ["wound1: First Wound to compare.", "wound2: Second Wound to compare."],
        "return_value": ["Boolean - If true, then the wound properties are the same."]
    },
    "fn_vbs_aw_getBleedingWounds": {
        "id": "1510093",
        "title": "fn_vbs_aw_getBleedingWounds",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getBleedingWounds",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, bodypart] call fn_vbs_aw_getBleedingWounds",
        "parameters": [
            "unit: Object - Soldier to check.",
            "bodypart: String or Number - Name or ID of Wound to check. If -1 or a non-existent body part name is passed, then all wounds are returned (optional, default: -1)."
        ],
        "return_value": ["Array of Wound"]
    },
    "fn_vbs_aw_getBodyPartID": {
        "id": "1510090",
        "title": "fn_vbs_aw_getBodyPartID",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getBodyPartID",
        "example": "",
        "syntax": "",
        "docSyntax": "bodypart call fn_vbs_aw_getBodyPartID",
        "parameters": ["bodypart: String - Name of bodypart to convert."],
        "return_value": ["Number - Associated ID of body part, or -1 if part does not exist."]
    },
    "fn_vbs_aw_getSeverityID": {
        "id": "1510091",
        "title": "fn_vbs_aw_getSeverityID",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getSeverityID",
        "example": "",
        "syntax": "",
        "docSyntax": "severity call fn_vbs_aw_getSeverityID",
        "parameters": ["severity: String - Name of severity to convert."],
        "return_value": ["Number - Associated ID of severity, or -1 if it does not exist."]
    },
    "fn_vbs_aw_getTreatmentID": {
        "id": "1510088",
        "title": "fn_vbs_aw_getTreatmentID",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getTreatmentID",
        "example": "",
        "syntax": "",
        "docSyntax": "treatment call fn_vbs_aw_getTreatmentID",
        "parameters": ["treatment: String - Name of treatments to convert."],
        "return_value": ["Number - Associated ID of treatment, or -1 if it does not exist."]
    },
    "fn_vbs_aw_getWoundBleeding": {
        "id": "1510089",
        "title": "fn_vbs_aw_getWoundBleeding",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getWoundBleeding",
        "example": "",
        "syntax": "",
        "docSyntax": "wound call fn_vbs_aw_getWoundBleeding",
        "parameters": ["wound: Wound - Wound to evaluate."],
        "return_value": ["Array of Number - [unconscious, dead]"]
    },
    "fn_vbs_aw_getWoundEffectsClass": {
        "id": "1510086",
        "title": "fn_vbs_aw_getWoundEffectsClass",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getWoundEffectsClass",
        "example": "",
        "syntax": "",
        "docSyntax": "wound call fn_vbs_aw_getWoundEffectsClass",
        "parameters": ["wound: Wound - Wound array."],
        "return_value": ["Config-2 - Path to wound effect class."]
    },
    "fn_vbs_aw_getWoundID": {
        "id": "1510087",
        "title": "fn_vbs_aw_getWoundID",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getWoundID",
        "example": "",
        "syntax": "",
        "docSyntax": "woundtype call fn_vbs_aw_getWoundID",
        "parameters": ["woundtype: String - Name of type to convert."],
        "return_value": ["Number - Associated ID of wound type, or -1 if the type does not exist."]
    },
    "fn_vbs_aw_getWoundPainLevel": {
        "id": "1510084",
        "title": "fn_vbs_aw_getWoundPainLevel",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getWoundPainLevel",
        "example": "",
        "syntax": "",
        "docSyntax": "wound call fn_vbs_aw_getWoundPainLevel",
        "parameters": ["wound: Wound to examine."],
        "return_value": ["Number - Pain level (between 0 and 1)."]
    },
    "fn_vbs_aw_getWounds": {
        "id": "1510085",
        "title": "fn_vbs_aw_getWounds",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getWounds",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, types, bodyparts] call fn_vbs_aw_getWounds",
        "parameters": [
            "unit: Object - Soldier to check.",
            "types: Array of String or Number - Names or IDs of type to list. If empty, then all wounds types are returned (optional, default: []).",
            "bodypart: Array of String or Number - Names or IDs of bodypart to check. If empty, then all wounds are returned (optional, default: [])."
        ],
        "return_value": ["Array of Wound"]
    },
    "fn_vbs_aw_getWoundTreatments": {
        "id": "1510114",
        "title": "fn_vbs_aw_getWoundTreatments",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_getWoundTreatments",
        "example": "",
        "syntax": "",
        "docSyntax": "wound call fn_vbs_aw_getWoundTreatments",
        "parameters": ["wound: Wound - Wound definition to evaluate."],
        "return_value": ["Array - IDs of required treatments."]
    },
    "fn_vbs_aw_hasWound": {
        "id": "1510115",
        "title": "fn_vbs_aw_hasWound",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_hasWound",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, woundtype] call fn_vbs_aw_hasWound",
        "parameters": [
            "unit: Object - Soldier to check.",
            "woundtype: String or Number - Name or ID of type to check."
        ],
        "return_value": ["Boolean - If true, then the specified wound type exists."]
    },
    "fn_vbs_aw_removeWounds": {
        "id": "1510112",
        "title": "fn_vbs_aw_removeWounds",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_removeWounds",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, wounds] call fn_vbs_aw_removeWounds",
        "parameters": [
            "unit: Object - Affected unit.",
            "wounds: Array of Wound - List of Wound objects that should be removed."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_aw_unitAddBleeding": {
        "id": "1510113",
        "title": "fn_vbs_aw_unitAddBleeding",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_unitAddBleeding",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, bleeding] call fn_vbs_aw_unitAddBleeding",
        "parameters": ["unit: Object - Soldier to check.", "bleeding: Number - Bleeding amount."],
        "return_value": ["Number - The bleeding ID."]
    },
    "fn_vbs_aw_unitGetBleedingAmount": {
        "id": "1510110",
        "title": "fn_vbs_aw_unitGetBleedingAmount",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_unitGetBleedingAmount",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, wound] call fn_vbs_aw_unitGetBleedingAmount",
        "parameters": ["unit: Object - Soldier to check.", "wound: Number - The bleeding to check."],
        "return_value": [
            "Array of Number - [seconds until unconscious, seconds until dead after losing consciousness] (as defined in the CfgAdvancedWounds effect class). Returns -1 if the checked bleeding ID does not exist."
        ]
    },
    "fn_vbs_aw_unitRemoveBleeding": {
        "id": "1510111",
        "title": "fn_vbs_aw_unitRemoveBleeding",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_unitRemoveBleeding",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, bleeding] call fn_vbs_aw_unitRemoveBleeding",
        "parameters": ["unit: Object - Affected unit.", "bleeding: Number - The bleeding to remove."],
        "return_value": ["Boolean - If true, then bleeding is successfully removed."]
    },
    "fn_vbs_aw_woundToString": {
        "id": "1510108",
        "title": "fn_vbs_aw_woundToString",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_woundToString",
        "example": "",
        "syntax": "",
        "docSyntax": "wound call fn_vbs_aw_woundToString",
        "parameters": ["wound: Wound - Wound array."],
        "return_value": ["String - Wound description."]
    },
    "fn_vbs_aw_woundWasTreated": {
        "id": "1510109",
        "title": "fn_vbs_aw_woundWasTreated",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_aw_woundWasTreated",
        "example": "",
        "syntax": "",
        "docSyntax": "[wound, treatment] call fn_vbs_aw_woundWasTreated",
        "parameters": [
            "wound: Wound - Checked wound.",
            "treatment: String or Number - Name or ID of treatment to check."
        ],
        "return_value": ["Boolean - If true, then the specified treatment has been applied."]
    },
    "fn_vbs_boatRadar": {
        "id": "1510106",
        "title": "fn_vbs_boatRadar",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_boatRadar",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, position] call fn_vbs_boatRadar",
        "parameters": [
            "vehicle: Object - Vehicle with the radar.",
            "position: Position3D - Initial X, Y, Z positional offset of the radar dish (optional, default: middle and top of attached vehicle)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_cachedEval": {
        "id": "1510107",
        "title": "fn_vbs_cachedEval",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_cachedEval",
        "example": "",
        "syntax": "",
        "docSyntax": "[input, code, cache] call fn_vbs_cachedEval",
        "parameters": [
            "input: Anything - Parameter(s) to pass to the code in the _this variable.",
            "code: Code - Expression to evaluate, with the input passed in the _this variable.",
            "cache: String or Array - Array or name of global variable used as cache (must first be initialized by fn vbs cacheInit)."
        ],
        "return_value": ["Anything - Result of the expression: input call code."]
    },
    "fn_vbs_cacheDiag": {
        "id": "1510104",
        "title": "fn_vbs_cacheDiag",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_cacheDiag",
        "example": "",
        "syntax": "",
        "docSyntax": "[cache, file] call fn_vbs_cacheDiag",
        "parameters": [
            "cache: String or Array - Array or string name of variable used as cache.",
            "file: String - Location of output file. If only a file name or relative path is given, the file is placed relative to the program executable (optional, if omitted, no file is created)."
        ],
        "return_value": [
            "cache_params: [maximum size, clean size, clean mode, array input] - Parameters used to establish the cache.",
            "usage_stats: [used elements, percent of available space in use, clean size percent of maximum size] - Statistics on how much of the cache space is used.",
            "hit_stats: [cache hits, cache misses, hit percent] - Statistics on how often data is pulled from the cache (\"hits\") as opposed to being calculated from scratch (\"misses\")."
        ]
    },
    "fn_vbs_cacheInit": {
        "id": "1510105",
        "title": "fn_vbs_cacheInit",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_cacheInit",
        "example": "",
        "syntax": "",
        "docSyntax": "[cache, maxsize, cleansize, cleanmode, arrayinput] call fn_vbs_cacheInit",
        "parameters": [
            "cache: String or Array - Empty array or string name of a global variable to use as a new or existing cache.",
            "maxsize: Number - Once the cache reaches this size (in number of different inputs stored), the cache is cleaned up, and the elements are removed to reduce the size to cleansize. If 0, cache can be of unlimited size (optional, default 0).",
            "cleansize: Number - Cache is reduced to this size once it surpasses maxsize. If 0, cleansize is 90% of maxsize (optional, default 0).",
            "cleanmode: Number - Method by which to reduce cache to cleansize (optional, default 0):0 - Remove least frequently used data.1 - Remove least recently used data.2 - Remove most frequently used data.3 - Remove most recently used data.4 - Reset entire cache (cleansize is ignored with this option).",
            "0 - Remove least frequently used data.",
            "1 - Remove least recently used data.",
            "2 - Remove most frequently used data.",
            "3 - Remove most recently used data.",
            "4 - Reset entire cache (cleansize is ignored with this option).",
            "arrayinput: Boolean - Determines the method used to access cache. Cache access is faster if false (optional, default: false):Use true, if either of the following applied:Arrays might be used as inputs in this cache.String input should be case-insensitive.Use false, if either of the following applied:Only non-array data is used.String input should be case-sensitive.",
            "Use true, if either of the following applied:Arrays might be used as inputs in this cache.String input should be case-insensitive.",
            "Arrays might be used as inputs in this cache.",
            "String input should be case-insensitive.",
            "Use false, if either of the following applied:Only non-array data is used.String input should be case-sensitive.",
            "Only non-array data is used.",
            "String input should be case-sensitive."
        ],
        "return_value": [
            "Boolean - Returns true if successful, false if not. Most likely cause of failure is passing a nil variable."
        ]
    },
    "fn_vbs_camSetFixedShot": {
        "id": "1510102",
        "title": "fn_vbs_camSetFixedShot",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_camSetFixedShot",
        "example": "",
        "syntax": "",
        "docSyntax": "[camera, distance_modifier, primary_target, secondary_target] call fn_vbs_camSetFixedShot",
        "parameters": [
            "camera: Object - Camera to set up for the shot.",
            "distance_modifier: Number - Modifies the camera distance used by the function by default (defaults already take the size of the target(s) into consideration):A value of 1 means use defaults.A value of 2 means use roughly double the defaults, and so on.",
            "A value of 1 means use defaults.",
            "A value of 2 means use roughly double the defaults, and so on.",
            "primary_target: Object or Position3D - Primary target of camera shot, centered in the frame.",
            "secondary_target (optional): Object or Position3D - Secondary target of camera shot, which the function also tries to incorporate into the shot."
        ],
        "return_value": [
            "Boolean - Returns true, if the shot has a clear view of the target(s); false, if not (although the shot is still ready to be committed)."
        ]
    },
    "fn_vbs_cargo_drop": {
        "id": "1510103",
        "title": "fn_vbs_cargo_drop",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_cargo_drop",
        "example": "",
        "syntax": "",
        "docSyntax": "[plane, parachute, object, total, rows, delay] call fn_vbs_cargo_drop",
        "parameters": [
            "plane: Object - Existing (and flying) plane, to drop items from.",
            "parachute: String - Class name of parachute to use (has to inherit from class ParachuteBase).",
            "object: String - Class name of item to drop (only static items can be dropped, vehicles are not usable upon landing).",
            "total: Number - Total number of items to drop.",
            "rows: Number - Number of items to drop in one go. If total exceeds the limit specified by this parameter, then multiple drops are executed, where delay specifies the time between drops (the total number of dropped items has to be divisible by the number of rows specified, any remainders are not dropped - for example, a total of 10, with 4 rows creates only two drops, for a total of 8).",
            "delay: Number - Delay (in seconds) between drops."
        ],
        "return_value": ["Boolean - Whether the drop was executed successfully."]
    },
    "fn_vbs_cargo_status": {
        "id": "1510100",
        "title": "fn_vbs_cargo_status",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_cargo_status",
        "example": "",
        "syntax": "",
        "docSyntax": "[plane] call fn_vbs_cargo_status",
        "parameters": ["plane: Object - Plane which has been ordered to drop cargo."],
        "return_value": [
            "Boolean - If true, then the plane is currently executing drops (or in the delay phase between dropped rows). If false, then the drop has been completed (even though the parachutes may still be in the air)."
        ]
    },
    "fn_vbs_chemlight": {
        "id": "1510101",
        "title": "fn_vbs_chemlight",
        "version": "1.50",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_chemlight",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, action, starton] call fn_vbs_chemlight",
        "parameters": [
            "vehicle: Object or Group - Data Type or Array - Either a single vehicle, a group of vehicles, an array of vehicles, or an array of groups.",
            "action: Number - Action(s) to execute. The available actions are:0 - Remove Device (removes the chemlight object from the vehicle).1 - Install Device (attaches a chemlight to the vehicle).2 - Query Device (returns the vehicle, if chemlight actions are available and its current state is on / off).4 - Turn On Device (turns the chemlight on).8 - Turn Off Device (turns the chemlight off).",
            "0 - Remove Device (removes the chemlight object from the vehicle).",
            "1 - Install Device (attaches a chemlight to the vehicle).",
            "2 - Query Device (returns the vehicle, if chemlight actions are available and its current state is on / off).",
            "4 - Turn On Device (turns the chemlight on).",
            "8 - Turn Off Device (turns the chemlight off).",
            "starton: Boolean - Whether to start the chemlight on for the vehicles passed to the command."
        ],
        "return_value": [
            "Array - A nested array, returning one sub-array per vehicle, with the following information:[vehicle (Object), whether it has a chemlight (Boolean), chemlight status (Number)]."
        ]
    },
    "fn_vbs_classIntroInVersion": {
        "id": "1510130",
        "title": "fn_vbs_classIntroInVersion",
        "version": "1.40",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_classIntroInVersion",
        "example": "",
        "syntax": "",
        "docSyntax": "[classname, classtype] call fn_vbs_classIntroInVersion",
        "parameters": [
            "classname: String - Name of class to query",
            "classtype: String - Configuration class in which to search. One of:CfgVehiclesCfgWeaponsCfgMagazinesCfgAmmoCfgPatches",
            "CfgVehicles",
            "CfgWeapons",
            "CfgMagazines",
            "CfgAmmo",
            "CfgPatches"
        ],
        "return_value": [
            "String - Version information (for example, \"1_30\").If the class does not exist, or is not versioned yet, \"0_00\" is returned."
        ]
    },
    "fn_vbs_closeAirSupport": {
        "id": "1511396",
        "title": "fn_vbs_closeAirSupport",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_closeAirSupport",
        "example": "",
        "syntax": "",
        "docSyntax": "[\"strafe\", [vehicle, targetPos, attackAngle, altitude, ingressPos, egressPos, contactPt, pullupPt, weapon, magazine]] call fn_vbs_closeAirSupport",
        "parameters": [
            "vehicle: Vehicle - Aircraft which is supposed to fire.",
            "targetPos: Position-2 - Position of target area to fire on.",
            "angleAttack: Number - Desired angle at which the aircraft attacks a target (relative to level flight).",
            "altitude: Number - Altitude the aircraft flies at from IP to target area.",
            "ingressPos: Position-2 - (Optional) Position the aircraft maneuvers to before initiating an attack run. Both ingress and egress parameters are required for this to occur, else the aircraft moves directly to the target position.",
            "egressPos: Position-2 - (Optional) Position aircraft maneuvers to after initiating an attack run.",
            "contactPt: Number - (Optional) Distance from target in meters at which the aircraft begins firing (default: 9/10 of the altitude).",
            "pullupPt: Number - (Optional) Distance from target in meters at which the aircraft ends firing and pulls up (default: half of the altitude).",
            "weapon: String - (Optional) Weapon to fire (default: first suitable weapon found).",
            "magazine: String - (Optional) Ammunition type to fire (default: loaded ammunition)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_colorByName": {
        "id": "1510131",
        "title": "fn_vbs_colorByName",
        "version": "1.45",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_colorByName",
        "example": "",
        "syntax": "",
        "docSyntax": "[name, alpha] call fn_vbs_colorByName",
        "parameters": ["name: String - Color name.", "alpha: Number - Alpha value to use (optional, default: 1)."],
        "return_value": ["Color - [R,G,B,A] (if no color is found, [0,0,0,1] is returned)."]
    },
    "fn_vbs_complex_animation": {
        "id": "1510128",
        "title": "fn_vbs_complex_animation",
        "version": "1.50",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_complex_animation",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit1, unit2, animation, position, direction] call fn_vbs_complex_animation",
        "parameters": [
            "unit1: Object - Primary (or only) actor. Can be a player.",
            "unit2: Object - Secondary actor (optional), unit2 moves to the position relative to unit1 that is required for the defined animation. Can only be AI.",
            "animation: String - Name of Animations to play.",
            "position: Position-2 - Location to play the animation at (optional).If not in proximity to the unit, the actors first move towards it.If no position is specified, then the animation is played at the current position of unit1.",
            "direction: Number - Direction unit1 should point in, when starting the animation (optional).If none is given, the the current direction is used.If position is specified, then direction should also be given."
        ],
        "return_value": [
            "Boolean - If true, then animation was performed successfully; if false, then an error occurred."
        ]
    },
    "fn_vbs_conditionalSelect": {
        "id": "1510129",
        "title": "fn_vbs_conditionalSelect",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_conditionalSelect",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, condition] call fn_vbs_conditionalSelect",
        "parameters": [
            "array: Array - Array to select from",
            "condition: Code - For each element, if true, the element is selected."
        ],
        "return_value": ["Array - A sub-array of elements that satisfy the specific condition."]
    },
    "fn_vbs_confirmationDialog": {
        "id": "1510126",
        "title": "fn_vbs_confirmationDialog",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_confirmationDialog",
        "example": "",
        "syntax": "",
        "docSyntax": "[text, yescode, nocode, [yes, no], display] call fn_vbs_confirmationDialog",
        "parameters": [
            "text: String - What to show in the message box.",
            "yescode: Code - Code to run, if the Yes button is pressed.",
            "nocode: Code - Code to run, if the No button / Esc is pressed (optional).",
            "[yes, no]: Array - Replace the yes and no with corresponding strings that you want to appear on the buttons (optional, use empty array [] to use default text).",
            "display: Display - If a confirmation dialog is already on the screen, pass its Display object using this parameter, to make the new confirmation dialog a child of it (otherwise, a new dialog is created for the confirmation box)."
        ],
        "return_value": ["Display - Display of newly created confirmation box."]
    },
    "fn_vbs_controlLink": {
        "id": "24248338",
        "title": "fn_vbs_controlLink",
        "version": "19.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_controlLink",
        "example": "",
        "syntax": "",
        "docSyntax": "[player, vehicle, mode, params] call fn_vbs_controlLink",
        "parameters": "",
        "return_value": ["Nothing"]
    },
    "fn_vbs_convoy": {
        "id": "1510127",
        "title": "fn_vbs_convoy",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_convoy",
        "example": "",
        "syntax": "",
        "docSyntax": "[action, vehicles, waypoints, speed, spacing] call fn_vbs_convoy",
        "parameters": [
            "action: String - Action applied to convoy. Can be\"INIT\": Vehicles are grouped together, and start moving towards the waypoints.\"UPDATE\": Allows updating the speed and distance of an active convoy.\"HALT\": Temporarily stops the convoy.\"RESUME\": Resumes convoy movement after a temporary stop.\"ABORT\": Permanently stops an active convoy.",
            "\"INIT\": Vehicles are grouped together, and start moving towards the waypoints.",
            "\"UPDATE\": Allows updating the speed and distance of an active convoy.",
            "\"HALT\": Temporarily stops the convoy.",
            "\"RESUME\": Resumes convoy movement after a temporary stop.",
            "\"ABORT\": Permanently stops an active convoy.",
            "vehicles: Array of Object - Vehicles that belong to the convoy. The position of a vehicle within the convoy is defined by its position in this array, with the lead vehicle being the first one in the array.",
            "waypoints: Array - List of waypoints that the convoy should pass.Only passed for \"INIT\" action (even if the convoy is lead by a player, where these waypoints are ignored, at least one waypoint must be passed).Can be either an array of markers or positions:Use markers: [\"MARKERS\",[\"marker1\", \"marker2\", ...]]Use positions: [\"WAYPOINTS\", [[2000, 2000], [2500, 2500], ...]]",
            "Use markers: [\"MARKERS\",[\"marker1\", \"marker2\", ...]]",
            "Use positions: [\"WAYPOINTS\", [[2000, 2000], [2500, 2500], ...]]",
            "speed: Array - Maximum speed of the convoy leader (in km/h). Every following vehicle adjusts its speed to keep an appropriate distance (optional).Can be either an absolute speed, or a relative offset, based on the slowest vehicle in the convoy (its maxSpeed property).Absolute speed: [\"ABS\", 50] (maximum speed is 50km/h)Relative speed: [\"CLIP\", 10] (maximum speed is 10km, less than the top speed of the slowest vehicle).",
            "Absolute speed: [\"ABS\", 50] (maximum speed is 50km/h)",
            "Relative speed: [\"CLIP\", 10] (maximum speed is 10km, less than the top speed of the slowest vehicle).",
            "spacing: Number - Minimum spacing between vehicles (in meters) (optional)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_coordinatesDialog": {
        "id": "1510124",
        "title": "fn_vbs_coordinatesDialog",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_coordinatesDialog",
        "example": "",
        "syntax": "",
        "docSyntax": "call fn_vbs_coordinatesDialog [display, coordPos, coordType, buttonCode, buttonCodeArg, titleText, buttonText]",
        "parameters": [
            "display: Display - Parent display or displayNull. if no dialog is active.",
            "coordPos: Position-2 - A VBS ASL2 position (with VBS_CD_coordPos, you can use the coordinates that the user selected previously, when the Coordinates Dialog was opened in the same VBS instance. If this value does not exist, the dialog fields remain empty).",
            "coordType: String - Type of coordinates that should be selected / shown in the created dialog. With VBS_CD_coordType, you can use the coordinates type that the user selected previously, when the Coordinates Dialog was opened in the same VBS instance. If this value does not exist, the current coordinate system is used (optional, the default value is selected based on the current coordinate system (getGeoCoordSystem)).",
            "buttonCode: Code - The code to execute when the OK button is clicked (optional, default: nil). These variables from missionNamespace can be used (for example, missionNamespace getVariable \"VBS_CD_coordPos\"):VBS_CD_coordPos - A VBS ASL2 position of the coordinates entered in the Coordinates Dialog.VBS_CD_coordType - The selected coordinates-system type in the Coordinates Dialog.VBS_CD_coordString - A human-readable string of the current coordinates from the Coordinates Dialog.",
            "VBS_CD_coordPos - A VBS ASL2 position of the coordinates entered in the Coordinates Dialog.",
            "VBS_CD_coordType - The selected coordinates-system type in the Coordinates Dialog.",
            "VBS_CD_coordString - A human-readable string of the current coordinates from the Coordinates Dialog.",
            "buttonCodeArg: Anything - The argument passed to buttonCode as _this.",
            "titleText: String - The dialog title text to display (optional, default: \"Set Coordinates\").",
            "buttonText: String - The text to display for the OK button (optional, default: \"OK\")."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_createComplexIED": {
        "id": "1510125",
        "title": "fn_vbs_createComplexIED",
        "version": "1.48",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_createComplexIED",
        "example": "",
        "syntax": "",
        "docSyntax": "[modelType, position, triggerType, triggerOption, explosionStrength, explosionType, onExplosion] call fn_vbs_createComplexIED",
        "parameters": [
            "modelType: String - Name of the model.",
            "position: Array - The position.",
            "triggerType: String - Trigger type, see description.",
            "triggerOption: Array or Number - See description (optional, use -1 for default values).",
            "explosionStrength: Number - Power of explosion, extra small (1) to extra large (7) (optional, use -1 for the default value (7)).",
            "explosionType: String or Number - Can be: \"normal\" (kills or wounds), \"wounding\" (only wounds, even at close distances) or \"fake\" (only visual effects: explosion, crater and shellshock, but no damage to persons or objects) (optional, use -1 for default value (\"normal\")).",
            "onExplosion: String or Number - Code string to execute on explosion (optional, use -1 for the default value (\"\")).",
            "placeArmed: Boolean - Set to true, if the IED is armed when placed (optional, use -1 for the default value (false)).",
            "name: String - The vehicleVarName and editor name (optional, use -1 for the default value (\"\")).",
            "dir: Number - The direction of the object (optional, use -1 for the default value (0)).",
            "disarmTime: Number - The time it takes to disarm the bomb, set to 0 to remove the action (optional, use -1 for the default value (10))."
        ],
        "return_value": ["Object - The created IED."]
    },
    "fn_vbs_createIED": {
        "id": "1510122",
        "title": "fn_vbs_createIED",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_createIED",
        "example": "",
        "syntax": "",
        "docSyntax": "[pos, azimut, type, charge, name, prox_dist, prox_side, attached_to, disarm_delay, hidden, jammable] call fn_vbs_createIED",
        "parameters": [
            "pos: Position3D - Position to create an IED at.",
            "azimut: Number - Direction to face the IED.",
            "type: String - CfgVehicles class used to represent the IED. Normally, \"vbs2_ied_X\" (X is 1-15), but can be anything.",
            "charge: Number - Number (1-7) indicating the IED explosive power. A higher value is more powerful. To create a fake IED (no damage), make this number negative (for example, -7 is a fake IED of maximum power).",
            "name: String - Variable name given to the IED, in quotes. Use \"\" for no name.",
            "prox_dist: Number - IED blows up when the object is this close. Use 0 for a non-proximity IED (optional, default: 0).",
            "prox_side: Side-2 - Side which sets off the IED using proximity. Pass a side data type ( \"EAST\", \"WEST\", and so on), or use \"ANY\", if all sides can detonate the IED (optional, default: \"ANY\").",
            "attached to: Object - Unit, vehicle, or trigger that the IED is linked to. Use objNull for no link (optional, default: objNull).",
            "disarm delay: Number - Number of seconds it takes to disarm IED. Use 0 to disable disarming (optional, default: 10).",
            "hidden: Boolean - Controls whether the IED is invisible (optional, default: false).",
            "jammable: Boolean - Can the IED be jammed by a CREW or a similar system (optional, default: false)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_createLocalSystem": {
        "id": "1510123",
        "title": "fn_vbs_createLocalSystem",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_createLocalSystem",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemName, tooltip] call fn_vbs_createLocalSystem",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemName: String - The name of the system.",
            "tooltip: String - Tooltip to display, when hovering over the system (optional)."
        ],
        "return_value": ["Number - The system ID."]
    },
    "fn_vbs_createSystem": {
        "id": "1510120",
        "title": "fn_vbs_createSystem",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_createSystem",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemName] call fn_vbs_createSystem",
        "parameters": ["vehicle: Object - The vehicle.", "systemName: String - The name of the system."],
        "return_value": ["Number - The system ID."]
    },
    "fn_vbs_createVehicle": {
        "id": "1510121",
        "title": "fn_vbs_createVehicle",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_createVehicle",
        "example": "",
        "syntax": "",
        "docSyntax": "[type, position, dir, markers, placement, special, local, asl, noClip, symbol, forcePos] call fn_vbs_createVehicle",
        "parameters": [
            "type: String - Type of object to be created.",
            "position: Position-2 - Position to create the vehicle at.",
            "dir: Number - Direction (in degrees) the vehicle should point at (optional, default: 0).",
            "markers: Array - If the array contains several marker names, the position of a random one is used to place the vehicle. Otherwise, the given position is used.",
            "placement: Number - Radius of a circle to randomly place the vehicle in.",
            "special: String - If set to \"FLY\", then vehicle is created in the air (specified in flyInHeight, in the class configuration), and will keep flying in a figure-8 pattern.",
            "local: Boolean - If\u00a0true, then object is created only on the local computer (optional, default: false).",
            "asl: Boolean - If\u00a0true\u00a0then position is interpreted as ASL. Requires the Special option to be set to \"CAN_COLLIDE\" (optional, default: false - creates the object on the ground, regardless of the position Z-value).",
            "noClip: Boolean - \u00a0If asl is set to\u00a0true, then setting noClip to\u00a0true\u00a0always creates the object above ground. PhysX vehicles are\u00a0always\u00a0created above ground, regardless of the noClip setting (optional, default: false).",
            "symbol: String - Path to the texture to use for the object briefing display. Use \"SYMBOL\" to draw a Visitor-style map symbol (only works for objects created during briefing, using the \"BRIEFING\" argument in the Editor Object) (optional, default: \"\").",
            "forcePos: Boolean - If\u00a0true, the object is placed exactly at the specified position, even if it ends up colliding with another object (optional, default: false) (V1.64+)."
        ],
        "return_value": ["Object - Created vehicle."]
    },
    "fn_vbs_crossProduct": {
        "id": "1510118",
        "title": "fn_vbs_crossProduct",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_crossProduct",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1,vector2] call fn_vbs_crossProduct",
        "parameters": ["vector1: Vector3D - First vector.", "vector2: Vector3D - Second vector."],
        "return_value": ["Vector3D - Cross product of the vectors."]
    },
    "fn_vbs_cutDecimals": {
        "id": "1510119",
        "title": "fn_vbs_cutDecimals",
        "version": "1.21",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_cutDecimals",
        "example": "",
        "syntax": "",
        "docSyntax": "[number,digits,pad] call fn_vbs_cutDecimals",
        "parameters": [
            "number: Number or Array - Number(s) to format (the function does do not work for nested arrays).",
            "digits: Number - Number of decimal digits to keep (optional, default: 2).",
            "pad: Boolean - Pad decimal digits to always return the specified number of digits. If this option is active, the number is returned as a string (optional, default: false). (V1.30+)"
        ],
        "return_value": ["(Number or Array), or (String, if pad is set to true)."]
    },
    "fn_vbs_damageHitpart": {
        "id": "1510116",
        "title": "fn_vbs_damageHitpart",
        "version": "17.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_damageHitpart",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, part] call fn_vbs_damageHitpart",
        "parameters": [
            "vehicle: Object - Vehicle to damage.",
            "part: String - Component name or error code (a component can have several error codes, so if component name is used, one of the error codes is randomly selected)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_vbs_dateToDTG": {
        "id": "1510117",
        "title": "fn_vbs_dateToDTG",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dateToDTG",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_dateToDTG",
        "parameters": [
            "array: Array - The same format as the command date. When you add the number 1 as an additional last argument, the resulting string is led by \"DTG\"."
        ],
        "return_value": ["String - Date in DTG format."]
    },
    "fn_vbs_dateToString": {
        "id": "1509890",
        "title": "fn_vbs_dateToString",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dateToString",
        "example": "",
        "syntax": "",
        "docSyntax": "[format, date] call fn_vbs_dateToString",
        "parameters": [
            "format: String - Formatting information:",
            "Day:d - Day of the month, 2 digits with leading zeros: 01 to 31.D - A textual representation of a day, three letters: Mon through Sun.j - Day of the month without leading zeros: 1 to 31l - A full textual representation of the day of the week: Sunday through Saturday.N - ISO-8601 numeric representation of the day of the week: 1 (for Monday) through 7 (for Sunday).S - English ordinal suffix for the day of the month, 2 characters: st, nd, rd, or th (works well with option j).w - Numeric representation of the day of the week: 0 (for Sunday) through 6 (for Saturday).z - The day of the year: 0 through 365.",
            "d - Day of the month, 2 digits with leading zeros: 01 to 31.",
            "D - A textual representation of a day, three letters: Mon through Sun.",
            "j - Day of the month without leading zeros: 1 to 31",
            "l - A full textual representation of the day of the week: Sunday through Saturday.",
            "N - ISO-8601 numeric representation of the day of the week: 1 (for Monday) through 7 (for Sunday).",
            "S - English ordinal suffix for the day of the month, 2 characters: st, nd, rd, or th (works well with option j).",
            "w - Numeric representation of the day of the week: 0 (for Sunday) through 6 (for Saturday).",
            "z - The day of the year: 0 through 365.",
            "Month:F - A full textual representation of a month, such as January or March.m - Numeric representation of a month, with leading zeros: 01 through 12.M - A short textual representation of a month, three letters: Jan through Dec.n - Numeric representation of a month, without leading zeros: 1 through 12.t - Number of days in the given month: 28 through 31.",
            "F - A full textual representation of a month, such as January or March.",
            "m - Numeric representation of a month, with leading zeros: 01 through 12.",
            "M - A short textual representation of a month, three letters: Jan through Dec.",
            "n - Numeric representation of a month, without leading zeros: 1 through 12.",
            "t - Number of days in the given month: 28 through 31.",
            "Year:L - Indicates a leap year: 1 if it is a leap year, 0 otherwise.Y - A full numeric representation of a year, 4 digits.y - A two digit representation of a year. For example, 99 or 03.",
            "L - Indicates a leap year: 1 if it is a leap year, 0 otherwise.",
            "Y - A full numeric representation of a year, 4 digits.",
            "y - A two digit representation of a year. For example, 99 or 03.",
            "Time:a - Lowercase Ante meridiem and Post meridiem: am or pm.A - Uppercase Ante meridiem and Post meridiem: AM or PM.g - 12-hour format of an hour without leading zeros: 1 through 12.G - 24-hour format of an hour without leading zeros: 0 through 23.h - 12-hour format of an hour with leading zeros: 01 through 12.H - 24-hour format of an hour with leading zeros: 00 through 23.i - Minutes with leading zeros: 00 to 59.s - Seconds, with leading zeros: 00 through 59.u - Milliseconds.",
            "a - Lowercase Ante meridiem and Post meridiem: am or pm.",
            "A - Uppercase Ante meridiem and Post meridiem: AM or PM.",
            "g - 12-hour format of an hour without leading zeros: 1 through 12.",
            "G - 24-hour format of an hour without leading zeros: 0 through 23.",
            "h - 12-hour format of an hour with leading zeros: 01 through 12.",
            "H - 24-hour format of an hour with leading zeros: 00 through 23.",
            "i - Minutes with leading zeros: 00 to 59.",
            "s - Seconds, with leading zeros: 00 through 59.",
            "u - Milliseconds.",
            "date: Array - Date array to use (optional, default: systemTime)."
        ],
        "return_value": ["String - Date / time in the specified format."]
    },
    "fn_vbs_dayofWeek": {
        "id": "1509891",
        "title": "fn_vbs_dayofWeek",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dayofWeek",
        "example": "",
        "syntax": "",
        "docSyntax": "[date,dayname] call fn_vbs_dayofWeek",
        "parameters": [
            "date: Array - Date to interpret [year, month, day] (optional, default: mission date).",
            "dayname: Boolean - If true, the weekday is returned as string (optional, default: false)."
        ],
        "return_value": [
            "Number or String - If Number, then 0 (Sunday), 1 (Monday), and so on. Otherwise, the day name in English (\"Sunday\", \"Monday\", and so on)."
        ]
    },
    "fn_vbs_dialog_update": {
        "id": "1509888",
        "title": "fn_vbs_dialog_update",
        "version": "3.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dialog_update",
        "example": "",
        "syntax": "",
        "docSyntax": "[upper, lower] call fn_vbs_dialog_update",
        "parameters": [
            "upper: Boolean - If true, then the upper parts of the inventory are updated.",
            "lower: Boolean - If true, then the lower parts of the inventory are updated."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_dirTo": {
        "id": "1509889",
        "title": "fn_vbs_dirTo",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dirTo",
        "example": "",
        "syntax": "",
        "docSyntax": "[point1, point2] call fn_vbs_dirTo",
        "parameters": [
            "point1: Object or Position-2 - First object / position.",
            "point2: Object or Position-2 - Second object / position."
        ],
        "return_value": ["Number - Direction from point1 to point2."]
    },
    "fn_vbs_dirToVector": {
        "id": "1509886",
        "title": "fn_vbs_dirToVector",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dirToVector",
        "example": "",
        "syntax": "",
        "docSyntax": "[azimuth, elevation] call fn_vbs_dirToVector",
        "parameters": [
            "azimuth: Number - Compass direction.",
            "elevation: Number - Degrees above the horizontal (optional, default: 0)."
        ],
        "return_value": ["Vector3D"]
    },
    "fn_vbs_displacedSnowDepth": {
        "id": "1509887",
        "title": "fn_vbs_displacedSnowDepth",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_displacedSnowDepth",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_displacedSnowDepth",
        "parameters": ["unit: Unit - Unit to check. The unit current setUnitPos is considered."],
        "return_value": ["Number - Depth (in meters) the unit would sink into the snow."]
    },
    "fn_vbs_distance2D": {
        "id": "1509884",
        "title": "fn_vbs_distance2D",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_distance2D",
        "example": "",
        "syntax": "",
        "docSyntax": "[point1, point2] call fn_vbs_distance2D",
        "parameters": [
            "point1: Object or Position-2 - First object / position.",
            "point2: Object or Position-2 - Second object / position."
        ],
        "return_value": ["Number - Distance in meters."]
    },
    "fn_vbs_distance2Dsqr": {
        "id": "1509885",
        "title": "fn_vbs_distance2Dsqr",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_distance2Dsqr",
        "example": "",
        "syntax": "",
        "docSyntax": "[point1, point2] call fn_vbs_distance2Dsqr",
        "parameters": [
            "point1: Object or Position-2 - First object / position.",
            "point2: Object or Position-2 - Second object / position."
        ],
        "return_value": ["Number - Squared distance (in meters)."]
    },
    "fn_vbs_doMoveEx": {
        "id": "1509882",
        "title": "fn_vbs_doMoveEx",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_doMoveEx",
        "example": "",
        "syntax": "",
        "docSyntax": "[object, destination, stop_in_combat, speed] call fn_vbs_doMoveEx",
        "parameters": [
            "object: Object - The unit or vehicle to move.",
            "destination: Position-2 - Position to move to. If nil is passed, the unit / vehicle return to formation.",
            "stop_in_combat: Boolean - If true, the unit / vehicle stops, once the destination is reached, even during combat. If false, the function aborts, once combat starts (the unit / vehicle is set to combat or stealth behavior), and the default combat AI takes over) (optional, default: false).",
            "speed: Number - Speed (km/h) the AI should move at. If set to 0, the AI chooses the speed. Use 1.5 to make humans walk (optional, default: 0),"
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_dotProduct": {
        "id": "1509883",
        "title": "fn_vbs_dotProduct",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dotProduct",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1, vector2] call fn_vbs_dotProduct",
        "parameters": ["vector1: Array of Number -\u00a0First vector.", "vector2: Array of Number - Second vector."],
        "return_value": ["Number - Cross product of input vectors."]
    },
    "fn_vbs_dropPos": {
        "id": "1509880",
        "title": "fn_vbs_dropPos",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dropPos",
        "example": "",
        "syntax": "",
        "docSyntax": "[container] call fn_vbs_dropPos",
        "parameters": ["container: Object - Usually, a unit or a vehicle."],
        "return_value": ["Position3D - AGL position, where the object can be dropped."]
    },
    "fn_vbs_DROPS": {
        "id": "1509881",
        "title": "fn_vbs_DROPS",
        "version": "1.46",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_DROPS",
        "example": "",
        "syntax": "",
        "docSyntax": "[mode, vehicle, rack] call fn_vbs_DROPS",
        "parameters": [
            "mode: Number - The mode (see the modes in the description)",
            "vehicle: Object - The truck.",
            "rack (optional): Object - The rack."
        ],
        "return_value": ["Boolean or Object"]
    },
    "fn_vbs_dsb_land_155_global_vars": {
        "id": "35880961",
        "title": "fn_vbs_dsb_land_155_global_vars",
        "version": "VBS3 20.2.0, VBS4 20.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_dsb_land_155_global_vars",
        "example": "",
        "syntax": "",
        "docSyntax": "[land155_var, value]\u00a0call\u00a0fn_vbs_dsb_land_155_global_vars",
        "parameters": [
            "land155_var:\u00a0String - Land 155 global variable name.",
            "value:\u00a0Number - Land 155 global variable value."
        ],
        "return_value": [
            "Boolean - Returns\u00a0true, if the global variable exits; false, if the global variable does not exist, or the value is non-numeric."
        ]
    },
    "fn_vbs_editor_getDisplay": {
        "id": "16842760",
        "title": "fn_vbs_editor_getDisplay",
        "version": "18.3",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_editor_getDisplay",
        "example": "",
        "syntax": "",
        "docSyntax": "_editor = call fn_vbs_editor_getDisplay",
        "parameters": [""],
        "return_value": ["Editor main display (Display)"]
    },
    "fn_vbs_editor_getMap": {
        "id": "16842757",
        "title": "fn_vbs_editor_getMap",
        "version": "18.3",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_editor_getMap",
        "example": "",
        "syntax": "",
        "docSyntax": "_map = call fn_vbs_editor_getMap",
        "parameters": [""],
        "return_value": ["Editor map control (Control)"]
    },
    "fn_vbs_engineering_getBuildState": {
        "id": "1509878",
        "title": "fn_vbs_engineering_getBuildState",
        "version": "3.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_engineering_getBuildState",
        "example": "",
        "syntax": "",
        "docSyntax": "object call fn_vbs_engineering_getBuildState",
        "parameters": ["object: Object - Construction object."],
        "return_value": ["0 - Deconstructed.", "1 - Fully built.", "-1 - Object does not support engineering."]
    },
    "fn_vbs_engineering_logWork": {
        "id": "1509879",
        "title": "fn_vbs_engineering_logWork",
        "version": "3.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_engineering_logWork",
        "example": "",
        "syntax": "",
        "docSyntax": "[object, time] call fn_vbs_engineering_logWork",
        "parameters": [
            "object: Object - Construction object.",
            "time: Number - Seconds to add to object work log (if negative, then the time is subtracted)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_equipAllowedWeapon": {
        "id": "1509876",
        "title": "fn_vbs_equipAllowedWeapon",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_equipAllowedWeapon",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, allowRifle, allowPistol, allowLauncher, allowUnarmed] call fn_vbs_equipAllowedWeapon",
        "parameters": [
            "unit: Object - The unit to control.",
            "allowRifle: Boolean - If true, then rifles are allowed.",
            "allowPistol: Boolean -If true, then handguns are allowed.",
            "allowLauncher: Boolean - If true, then launchers are allowed.",
            "allowUnarmed: Boolean - If true, then the unit can be unarmed."
        ],
        "return_value": [
            "String - The name of the animation the unit switches to, or an empty string (\"\") in case no switching is needed (or if the unit is not local)."
        ]
    },
    "fn_vbs_expandSciNotation": {
        "id": "1509877",
        "title": "fn_vbs_expandSciNotation",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_expandSciNotation",
        "example": "",
        "syntax": "",
        "docSyntax": "number call fn_vbs_expandSciNotation",
        "parameters": ["number: Number or String - Represents a number."],
        "return_value": ["String - The number in expanded / standard notation."]
    },
    "fn_vbs_fileBrowser": {
        "id": "1509906",
        "title": "fn_vbs_fileBrowser",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_fileBrowser",
        "example": "",
        "syntax": "",
        "docSyntax": "[display, buttonCode, buttonText, titleText, defaultPath, fileMask, saveName] call fn_vbs_fileBrowser",
        "parameters": [
            "display: Display - If another dialog is already on the screen, pass the display object here. Otherwise, pass displayNull.",
            "buttonCode: Code - Code to run when the OK button is pressed. The selected file and path are passed to the code with the variable _filename. The return value of the code can be a Boolean, in which case, if it returns true, the file browser automatically closes after running the code. Otherwise, the file browser remains open.",
            "buttonText: String - Text for the OK button (optional, default: \"Load\").",
            "titleText: String - Text for the title of the file browser window (optional, default: \"Select a file\").",
            "defaultPath: String - Starting folder path and file name to show when the browser is first opened (optional, default: VBS user folder in <Documents>).",
            "fileMask: String - Allows a mask to be applied to only show certain files. Same behavior as the fileMask parameter of ListFiles (optional, default: no mask / all files).",
            "saveName: String - Allows the user selection to be stored in this parameter, so that subsequent calls with the same saveName restore the last selection. Pass an empty string to always show the defaultPath (optional, default: \"\")."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_fillCrewPositions": {
        "id": "1509907",
        "title": "fn_vbs_fillCrewPositions",
        "version": "1.54",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_fillCrewPositions",
        "example": "",
        "syntax": "",
        "docSyntax": "[object, unittypes, maxFill, minFill] call fn_vbs_fillCrewPositions",
        "parameters": [
            "object: Object - The vehicle to be crewed.",
            "unittypes: Array - Either class names or objects (existing units), of which a random selection is used. If class names are specified, then the new units of that type are spawned; if existing units are specified, then these are placed in the vehicle.",
            "maxFill: Number - Maximum number of units to place (optional, default: random number).",
            "minFill: Number - Minimum number of units to place (optional, default: 1)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_filterString": {
        "id": "1509904",
        "title": "fn_vbs_filterString",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_filterString",
        "example": "",
        "syntax": "",
        "docSyntax": "[base, blacklist, whitelist] call fn_vbs_filterString",
        "parameters": [
            "base: String - Base string to filter.",
            "blacklist: String - Each character within this string is removed from the base string.",
            "whitelist: String - Only characters contained in this string are returned from the base string. Any characters defined in blacklist override those in whitelist."
        ],
        "return_value": ["String - Filtered base string."]
    },
    "fn_vbs_findCargoPos": {
        "id": "1509905",
        "title": "fn_vbs_findCargoPos",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_findCargoPos",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, useLitter] call fn_vbs_findCargoPos",
        "parameters": [
            "vehicle: Object - Vehicle in which to find a position for casualties.",
            "useLitter: Boolean - Whether to give preference to litter positions (optional, default: true)."
        ],
        "return_value": [
            "cargoType: String - \"gunner\", \"cargo\" or \"\" (if none found).",
            "cargoPos: Number or Array - Either cargo position or turret path.",
            "onLitter: Boolean - Whether a litter position was found."
        ]
    },
    "fn_vbs_findEdge": {
        "id": "1509902",
        "title": "fn_vbs_findEdge",
        "version": "1.40",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_findEdge",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, multiplier, start_position, step_size, lod, radius, return_type, warningMsg] call fn_vbs_findEdge",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "multiplier: Number - Multiplies each component of the step size array, can also be code-driven. If code is used, the useful parameters in the code are (the code must return a number): _iteration (iteration step array), _position (current model position array), _x (current axis) (optional, default: 1).",
            "start_position: Array - Where to start the iterations from (in model coordinates) (optional, default: [0,0,1]).",
            "step size: Array - How far to iterate each step (optional, default: [0.25,0,0]).",
            "lod: String - Which LOD to consider for testing (the same as those available for the cylinderCollision command) (optional, default: \"VIEW\").",
            "radius: Number - The radius considered around each iteration step (optional, default: 0.5).",
            "return_type: Number - The values can be:0 - Model coordinates1 - World coordinates (AGL)2 - World coordinates (ASL) (optional, default: 0).",
            "0 - Model coordinates",
            "1 - World coordinates (AGL)",
            "2 - World coordinates (ASL) (optional, default: 0).",
            "warningMsg: Boolean - Enables / disables warning messages (optional, default false)."
        ],
        "return_value": [
            "Array - Either model space, world space AGL, or world space ASL, depending on the request. The position is the final step where there was a collision with the model."
        ]
    },
    "fn_vbs_findEmptyLocation": {
        "id": "1509903",
        "title": "fn_vbs_findEmptyLocation",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_findEmptyLocation",
        "example": "",
        "syntax": "",
        "docSyntax": "[pos, class, dir, offset, radius, condition] call fn_vbs_findEmptyLocation",
        "parameters": [
            "pos: PositionAGL - Position to start the search from.",
            "class: String - Class name of object to search for, to find an empty space next to.",
            "dir: Number - Direction from found object, in which to check for empty space. If more qualified objects are found in the given direction, then the start position used to find an empty location is reset to that object, so that the empty position is always past the last existing object (optional, default: random 360).",
            "offset: Number - Distance from found object, within which to find an empty space (optional, default: 1).",
            "radius: Number - Radius around pos, within which to search for the first object of type class (optional, default: 1).",
            "condition: Code - Code that must return true, in order for the found object to be considered for placement. Each found object within the search radius is passed to this function as an argument (and can be referenced using _this select 0) (optional, default: true)."
        ],
        "return_value": [
            "Array - The next available position (as PositionAGL, with possible snow layers considered). If no objects of the specified class, or no empty spaces were found, then an empty array is returned."
        ]
    },
    "fn_vbs_fireSupport": {
        "id": "1509900",
        "title": "fn_vbs_fireSupport",
        "version": "2.00",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_fireSupport",
        "example": "",
        "syntax": "",
        "docSyntax": "[position, vehicle, [rounds, delay, start], exit, output, firemode] call fn_vbs_fireSupport",
        "parameters": [
            "position: Position3D - Position to fire at.",
            "vehicle: Object - Armed vehicle to fire its primary weapon (must be crewed).",
            "rounds: Number - How many rounds (or bursts) to fire.",
            "delay: Number - Delay (in seconds) between rounds / bursts.",
            "start: Number - Delay (in seconds) before the first shot is fired (minimum delay is 4 seconds).",
            "exit: Code - Code to execute after the last shot is fired.",
            "output: String - Type of radio messages to generate (optional, default: \"full\")(currently ignored: always \"full\")\"full\": Message at the start and end of each round / burst.\"startEnd\": Only start / end messages.\"noOutput\": No messages.",
            "\"full\": Message at the start and end of each round / burst.",
            "\"startEnd\": Only start / end messages.",
            "\"noOutput\": No messages.",
            "firemode: Number - Fire mode to use (optional, default: 1):1: Single shot2: Burst3: Full auto",
            "1: Single shot",
            "2: Burst",
            "3: Full auto"
        ],
        "return_value": ["Boolean - Returns false if target cannot be reached. Otherwise, true."]
    },
    "fn_vbs_fireSysEventHandler": {
        "id": "1509901",
        "title": "fn_vbs_fireSysEventHandler",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_fireSysEventHandler",
        "example": "",
        "syntax": "",
        "docSyntax": "[type, params] call fn_vbs_fireSysEventHandler",
        "parameters": [
            "type: String - Type of event handler to fire.",
            "params: Anything - Data to pass to event scripts in the _this variable."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_flipArray": {
        "id": "1509898",
        "title": "fn_vbs_flipArray",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_flipArray",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_flipArray",
        "parameters": ["array: Array - The array."],
        "return_value": ["Array - Flipped array (the input array is also modified by reference)."]
    },
    "fn_vbs_fn_initStowBarrel": {
        "id": "1509899",
        "title": "fn_vbs_fn_initStowBarrel",
        "version": "1.69",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_fn_initStowBarrel",
        "example": "",
        "syntax": "",
        "docSyntax": "[flag, tank] call fn_vbs_initStowBarrel",
        "parameters": [
            "flag: Number - The flag values can be:1 - Stow smoothly2 - Unstow3 - Stow instantly4 - Is un-stowed?5 - Is in the process of stowing / un-stowing?",
            "1 - Stow smoothly",
            "2 - Unstow",
            "3 - Stow instantly",
            "4 - Is un-stowed?",
            "5 - Is in the process of stowing / un-stowing?",
            "tank: Object - The tank."
        ],
        "return_value": [
            "Boolean - Indicates if the tank is able to / is already to perform the requested action (stow / unstow)."
        ]
    },
    "fn_vbs_formatSeconds": {
        "id": "1509896",
        "title": "fn_vbs_formatSeconds",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_formatSeconds",
        "example": "",
        "syntax": "",
        "docSyntax": "[seconds, wantedFormat] call fn_vbs_formatSeconds",
        "parameters": [
            "seconds: Number - Time, in seconds.",
            "wantedFormat: String - The desired format. See fn vbs dateToString."
        ],
        "return_value": ["String - Formatted time."]
    },
    "fn_vbs_freeIndex": {
        "id": "1509897",
        "title": "fn_vbs_freeIndex",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_freeIndex",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_freeIndex",
        "parameters": ["array: Array - The array."],
        "return_value": ["Number - Index of first free (nil) element in the given array."]
    },
    "fn_vbs_geometricMean": {
        "id": "1509894",
        "title": "fn_vbs_geometricMean",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_geometricMean",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_geometricMean",
        "parameters": ["array: Array - The array."],
        "return_value": ["Number"]
    },
    "fn_vbs_GetArg": {
        "id": "1509895",
        "title": "fn_vbs_GetArg",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_GetArg",
        "example": "",
        "syntax": "",
        "docSyntax": "[array,flag,default] call fn_vbs_GetArg",
        "parameters": [
            "array: Array - Mixed array to search.",
            "flag: String - Flag that is being searched for (case-insensitive). The flag in the tested array needs to end with a colon, in order to be recognized.",
            "default: Anything - Value to return, if the flag is not found."
        ],
        "return_value": ["Anything - Array element that follows the flag (or default value, if not found)."]
    },
    "fn_vbs_getBBVolume": {
        "id": "1509892",
        "title": "fn_vbs_getBBVolume",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getBBVolume",
        "example": "",
        "syntax": "",
        "docSyntax": "object call fn_vbs_getBBVolume",
        "parameters": ["object: Object - The object."],
        "return_value": ["Number - Bounding box volume in cubic meters."]
    },
    "fn_vbs_getCameraDir": {
        "id": "1509893",
        "title": "fn_vbs_getCameraDir",
        "version": "1.34",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getCameraDir",
        "example": "",
        "syntax": "",
        "docSyntax": "[indegrees] call fn_vbs_getCameraDir",
        "parameters": [
            "indegrees: Boolean - If true, camera direction is returned as degrees, in an array of [direction, pitch]. If false, vector direction is returned (optional, default: false)."
        ],
        "return_value": ["Array - Vector direction the camera is facing in."]
    },
    "fn_vbs_getCargo": {
        "id": "1509922",
        "title": "fn_vbs_getCargo",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getCargo",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_getCargo",
        "parameters": ["vehicle: Object - The vehicle."],
        "return_value": ["Array - Vehicle cargo units."]
    },
    "fn_vbs_getConfigValue": {
        "id": "1509923",
        "title": "fn_vbs_getConfigValue",
        "version": "3.3",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getConfigValue",
        "example": "",
        "syntax": "",
        "docSyntax": "[config, default] call fn_vbs_getConfigValue",
        "parameters": [
            "config: Config-2 - The path to the configuration property to read.",
            "default: String, Number, or Array - The default value to return, if no configuration entry is found."
        ],
        "return_value": [
            "String, Number ,or Array - The value of the configuration entry (or the defined default, if no entry is found). If the type of the default value does not match the type of the queried entry, then the default value is returned. If no default value is provided, then the function tries to determine the type itself. If no default is provided, and no matching property is found, then 0 is returned. "
        ]
    },
    "fn_vbs_getContentModules": {
        "id": "1509920",
        "title": "fn_vbs_getContentModules",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getContentModules",
        "example": "",
        "syntax": "",
        "docSyntax": "[name] call fn_vbs_getContentModules",
        "parameters": ["name: String - Name of CfgPatches class to check."],
        "return_value": [
            "Array of String - Module names used by the specified class. Returns nil, if name is not a valid CfgPatches entry."
        ]
    },
    "fn_vbs_getControlIDC": {
        "id": "1509921",
        "title": "fn_vbs_getControlIDC",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getControlIDC",
        "example": "",
        "syntax": "",
        "docSyntax": "control call fn_vbs_getControlIDC",
        "parameters": ["control: Control - Control or display."],
        "return_value": ["Number - IDC or IDD of control or display."]
    },
    "fn_vbs_getCrewAction": {
        "id": "1509918",
        "title": "fn_vbs_getCrewAction",
        "version": "3.10",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getCrewAction",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_getCrewAction",
        "parameters": ["unit: Object - Unit currently occupying a vehicle."],
        "return_value": ["String - Animation class name, or empty string, if not in vehicle."]
    },
    "fn_vbs_getCrewPos": {
        "id": "1509919",
        "title": "fn_vbs_getCrewPos",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getCrewPos",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle] call fn_vbs_getCrewPos",
        "parameters": ["vehicle: Object - The vehicle of the unit."],
        "return_value": ["Array"]
    },
    "fn_vbs_getDefaultSystem": {
        "id": "1509916",
        "title": "fn_vbs_getDefaultSystem",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getDefaultSystem",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_getDefaultSystem",
        "parameters": ["vehicle: Object - The vehicle."],
        "return_value": ["Array - Path to the default system. An empty array is returned, if no system is present."]
    },
    "fn_vbs_getHail": {
        "id": "1509952",
        "title": "fn_vbs_getHail",
        "version": "3.4.M, 3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getHail",
        "example": "",
        "syntax": "",
        "docSyntax": "call fn_vbs_getHail",
        "parameters": [""],
        "return_value": ["Number - Hail intensity in the range 0-1 (0 means no hail; 1 is maximum hail)."]
    },
    "fn_vbs_getHitpointName": {
        "id": "1509917",
        "title": "fn_vbs_getHitpointName",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getHitpointName",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, hitpointSubclass] call fn_vbs_getHitpointName",
        "parameters": ["vehicle: Object - The vehicle."],
        "return_value": ["String - The hitpoint name."]
    },
    "fn_vbs_getInheritedCfg": {
        "id": "1509914",
        "title": "fn_vbs_getInheritedCfg",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getInheritedCfg",
        "example": "",
        "syntax": "",
        "docSyntax": "config call fn_vbs_getInheritedCfg",
        "parameters": ["config: Config-2 - Class to search within"],
        "return_value": ["Array of Config-2"]
    },
    "fn_vbs_getLineDist": {
        "id": "1509915",
        "title": "fn_vbs_getLineDist",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getLineDist",
        "example": "",
        "syntax": "",
        "docSyntax": "[start1, length1, start2, length2] call fn_vbs_getLineDist",
        "parameters": [
            "start1: Number - Start point of first section.",
            "length1: Number - Length of first section.",
            "start2: Number - Start point of second section.",
            "length2: Number - Length of the second section."
        ],
        "return_value": [
            "If the result is < 0, the sections are overlapping.",
            "If the result is 0, the sections share one point.",
            "If the result is > 0, the sections are not connected."
        ]
    },
    "fn_vbs_getLockTarget": {
        "id": "1509912",
        "title": "fn_vbs_getLockTarget",
        "version": "2.08",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getLockTarget",
        "example": "",
        "syntax": "",
        "docSyntax": "[pos, dir, ignore, range, type] call fn_vbs_getLockTarget",
        "parameters": [
            "pos: PositionASL - Position of camera.",
            "dir: Vector3D - Direction the camera points in.",
            "ignore: Object - Object that should be ignored (optional, default: player vehicle).",
            "range: Number - Maximum range (in meters) to search around the calculated ground position (optional, default: 30).",
            "type: Array of String - Class types to exclusively use in object search (optional, default: \"AllVehicles\")."
        ],
        "return_value": [
            "PositionASL or Object - If no object is found within the specified filter criteria, the ground position the camera points at is returned. If a qualified object is found, then it is returned instead."
        ]
    },
    "fn_vbs_getMagazines": {
        "id": "1509913",
        "title": "fn_vbs_getMagazines",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getMagazines",
        "example": "",
        "syntax": "",
        "docSyntax": "weaponClass call fn_vbs_getMagazines",
        "parameters": ["weaponClass: String - Class name of weapon to check."],
        "return_value": ["Array of String - One for the class names of each usable magazine."]
    },
    "fn_vbs_getModes": {
        "id": "1509910",
        "title": "fn_vbs_getModes",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getModes",
        "example": "",
        "syntax": "",
        "docSyntax": "config call fn_vbs_getModes",
        "parameters": ["config: Config-2 - Configuration pointing to muzzle or weapon."],
        "return_value": ["Array of Config-2 - One for each mode."]
    },
    "fn_vbs_getMuzzles": {
        "id": "1509911",
        "title": "fn_vbs_getMuzzles",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getMuzzles",
        "example": "",
        "syntax": "",
        "docSyntax": "weaponClass call fn_vbs_getMuzzles",
        "parameters": ["weaponClass: String - Class name of weapon to check."],
        "return_value": ["Array of String - One for the class name of each usable muzzle."]
    },
    "fn_vbs_getPitchBank": {
        "id": "1509908",
        "title": "fn_vbs_getPitchBank",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getPitchBank",
        "example": "",
        "syntax": "",
        "docSyntax": "object call fn_vbs_getPitchBank",
        "parameters": ["object: Object - The given object."],
        "return_value": [
            "Pitch:0 when the object is level.90 when pointing straight up.-90 when pointing straight down.",
            "0 when the object is level.",
            "90 when pointing straight up.",
            "-90 when pointing straight down.",
            "Bank:0 when the the object is level.90 when the object is rolled to the right.-90 when rolled to the left.180 when rolled upside down.",
            "0 when the the object is level.",
            "90 when the object is rolled to the right.",
            "-90 when rolled to the left.",
            "180 when rolled upside down."
        ]
    },
    "fn_vbs_getProxyMagazines": {
        "id": "1509909",
        "title": "fn_vbs_getProxyMagazines",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getProxyMagazines",
        "example": "",
        "syntax": "",
        "docSyntax": "[veh, turret] call fn_vbs_getProxyMagazines",
        "parameters": ["veh: Object - The vehicle.", "turret: String - The selected vehicle turret (optional)."],
        "return_value": ["Array - An array of magazine strings with proxy weapons."]
    },
    "fn_vbs_getSimulationProxies": {
        "id": "1509938",
        "title": "fn_vbs_getSimulationProxies",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSimulationProxies",
        "example": "",
        "syntax": "",
        "docSyntax": "[obj, simType, flush] call fn_vbs_getSimulationProxies",
        "parameters": [
            "obj: Object - The object whose proxies you want to query.",
            "simType: String - The simulation type to filter or the path to the proxy model.",
            "flush: Boolean - Forces the search cache to be flushed (optional, default: false)."
        ],
        "return_value": [
            "path: String - The proxy path, including proxy index.",
            "pos: Position-2 - The position in the model space of the proxy.",
            "vectors: Array - A vector array that includes:vDir: Position3D - The direction vector of the proxy.vUp: Position3D - The upVector of the proxy.",
            "vDir: Position3D - The direction vector of the proxy.",
            "vUp: Position3D - The upVector of the proxy.",
            "index: Number - The proxy index."
        ]
    },
    "fn_vbs_getSystemItemCode": {
        "id": "1509939",
        "title": "fn_vbs_getSystemItemCode",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemCode",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemCode",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": [
            "Code - The code assigned to the system item, or nil, if the item does not exist or cannot have a code assigned."
        ]
    },
    "fn_vbs_getSystemItemCodeParam": {
        "id": "1509936",
        "title": "fn_vbs_getSystemItemCodeParam",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemCodeParam",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemCodeParam",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": [
            "Code - The code parameter assigned to the system item, or nil if the item does not exist or cannot have code assigned."
        ]
    },
    "fn_vbs_getSystemItemName": {
        "id": "1509937",
        "title": "fn_vbs_getSystemItemName",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemName",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemName",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["String - The name of the item, or nil if the item does not exist."]
    },
    "fn_vbs_getSystemItemParent": {
        "id": "1509934",
        "title": "fn_vbs_getSystemItemParent",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemParent",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemParent",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["String - The system item parent ID, or nil if the item does not exist."]
    },
    "fn_vbs_getSystemItemShortcut": {
        "id": "1509935",
        "title": "fn_vbs_getSystemItemShortcut",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemShortcut",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemShortcut",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The Systems-Menu item ID."],
        "return_value": ["String - Assigned action, nil if none is assigned."]
    },
    "fn_vbs_getSystemItemShowCondition": {
        "id": "1509932",
        "title": "fn_vbs_getSystemItemShowCondition",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemShowCondition",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemShowCondition",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["Code - The condition code, or nil if the system or item do not exist."]
    },
    "fn_vbs_getSystemItemTooltip": {
        "id": "1509933",
        "title": "fn_vbs_getSystemItemTooltip",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemTooltip",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemTooltip",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["String - The tooltip, or\u00a0nil if the item does not exist."]
    },
    "fn_vbs_getSystemItemType": {
        "id": "1509930",
        "title": "fn_vbs_getSystemItemType",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystemItemType",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_getSystemItemType",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["SYSTEM_TYPE_ITEM 0", "SYSTEM_TYPE_TOGGLE 1", "SYSTEM_TYPE_SUBMENU 2"]
    },
    "fn_vbs_getSystems": {
        "id": "1509931",
        "title": "fn_vbs_getSystems",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getSystems",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_getSystems",
        "parameters": ["vehicle: Object - The vehicle."],
        "return_value": ["Array - Array of IDs of systems assigned to the vehicle."]
    },
    "fn_vbs_getTurret": {
        "id": "1509928",
        "title": "fn_vbs_getTurret",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getTurret",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, unit] call fn_vbs_getTurret",
        "parameters": ["vehicle: Object - The vehicle of the unit.", "unit: Object - The unit in the turret."],
        "return_value": [
            "Array - Path to turret used by unit. If the unit is not in a turret of that vehicle, then: In v1.30+: Returns an empty arrayBefore v1.30: The function has a bug, returns the last turret of the vehicle. "
        ]
    },
    "fn_vbs_getTurretCfg": {
        "id": "1509929",
        "title": "fn_vbs_getTurretCfg",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getTurretCfg",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, turret] call fn_vbs_getTurretCfg",
        "parameters": [
            "vehicle: String or Object - String class name of vehicle, or vehicle object (V1.30+).",
            "turret: Array - Turret path (for example, [0,1])."
        ],
        "return_value": ["Config-2"]
    },
    "fn_vbs_getUAVModuleLinks": {
        "id": "1509926",
        "title": "fn_vbs_getUAVModuleLinks",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getUAVModuleLinks",
        "example": "",
        "syntax": "",
        "docSyntax": "[veh] call fn_vbs_getUAVModuleLinks",
        "parameters": ["veh: Object or String - The vehicle object or vehicle name."],
        "return_value": [
            "turretIndex: Number - The turret index.",
            "moduleLinks: Array - An array of strings representing supported module links (or feeds)."
        ]
    },
    "fn_vbs_getUnitPos": {
        "id": "1509927",
        "title": "fn_vbs_getUnitPos",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getUnitPos",
        "example": "",
        "syntax": "",
        "docSyntax": "unit call fn_vbs_getUnitPos",
        "parameters": ["unit: Object - The unit"],
        "return_value": [
            "String - One of \"UP\", \"MIDDLE\", \"DOWN\", or \"\" (for vehicles and other non-person objects)."
        ]
    },
    "fn_vbs_getVehiclePos": {
        "id": "1509924",
        "title": "fn_vbs_getVehiclePos",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getVehiclePos",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, vehicle] call fn_vbs_getVehiclePos",
        "parameters": [
            "unit: Object - Unit to check.",
            "vehicle: Object - Vehicle you think the unit is in (optional: if omitted, the unit vehicle is detected automatically)."
        ],
        "return_value": [
            "position: String - \"CARGO\", \"GUNNER\", or \"DRIVER\".",
            "path: Array - The path is either the cargo index, the turret path, or an empty array, depending on the position type. If the unit is not in the vehicle, or is on foot, an empty array is returned."
        ]
    },
    "fn_vbs_getVisibility": {
        "id": "1509925",
        "title": "fn_vbs_getVisibility",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getVisibility",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, vehicle, except] call fn_vbs_getVisibility",
        "parameters": [
            "array: Array - Position in the PositionAGL format.",
            "vehicle: Object - The vehicle",
            "except: Array - Array with objects which are not taken into account as view blockers (optional)."
        ],
        "return_value": ["Number - Visibility ratio."]
    },
    "fn_vbs_getWeaponAndObjectCargo": {
        "id": "24248509",
        "title": "fn_vbs_getWeaponAndObjectCargo",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_getWeaponAndObjectCargo",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_getWeaponAndObjectCargo",
        "parameters": ["unit: Object - Player or AI."],
        "return_value": [
            "Array - similar format as in getWeaponCargo. Each\u00a0object weapon will be returned as separate categories with count 1."
        ]
    },
    "fn_vbs_greatestNum": {
        "id": "1509954",
        "title": "fn_vbs_greatestNum",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_greatestNum",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_greatestNum",
        "parameters": ["array: Array - Array of Number."],
        "return_value": ["Number"]
    },
    "fn_vbs_groupCargo": {
        "id": "1509955",
        "title": "fn_vbs_groupCargo",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_groupCargo",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_groupCargo",
        "parameters": ["vehicle: Object - The vehicle"],
        "return_value": ["Array - An array of groups."]
    },
    "fn_vbs_highPrecisionAdd": {
        "id": "1509953",
        "title": "fn_vbs_highPrecisionAdd",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_highPrecisionAdd",
        "example": "",
        "syntax": "",
        "docSyntax": "[numbers] call fn_vbs_highPrecisionAdd",
        "parameters": ["numbers: Array of Number or String - The numbers."],
        "return_value": ["String - Sum of the inputs, in full digit precision."]
    },
    "fn_vbs_ImprovedHint": {
        "id": "1509950",
        "title": "fn_vbs_ImprovedHint",
        "version": "1.43",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_ImprovedHint",
        "example": "",
        "syntax": "",
        "docSyntax": "[text, text_R_C, textrow1height, size, pos, poscenter, textsize, title, id, fadeintime, buttonX, button1size, help, exit, code] call fn_vbs_ImprovedHint",
        "parameters": [
            "text: Array of String - Main text to display. If the array contains more than one element, then all the elements are shown as concatenated.",
            "text_R_C: String - Any additional text to show. R and C are numbers, and indicate the row and column the text is placed in (for example, \"text_1_2\"). Multiple entries of this arguments (with different \"R\" and \"C\" values) can be entered. When using two rows, column 1 must be defined, even if its string is empty. Maximum: 2 rows, 6 columns.",
            "textrow1height: Number - The negative offset from the bottom of the dialog, the second line should be placed at.",
            "size: Array - Dialog size, represented as [width, height] - 1 = full screen, .1 = 10% of the screen.",
            "pos: Array - An [x, y] position of the window (0 = left edge, .5 = middle of the screen). If not defined, the previous position is used.",
            "poscenter: String - Automatically positions window in the center of the screen. Should be placed after size parameter.",
            "textsize: Array - Additional space [width, height] to add to the text field (for example, to create scroll bars).",
            "title: String - Dialog title, shown in the header bar.",
            "id: String - The activateKey that has to be active, in order for hint messages to be shown.",
            "fadeintime: Number - How long it should take (in seconds) to fade-in the dialog (default: 0).",
            "buttonX: Array - Array of [text, code] that displays one or more buttons at the bottom of the dialog. X is a number between 1 and 6, and indicates the button number, \"text\" and \"code\" are both strings, and define the button label, and the action to perform, when pressed. Multiple entries of this arguments (with different \"X\" values) can be entered.",
            "button1size: Array - An array of [x, y, w, h], only used when there is just one button, to define its position and size.",
            "help: String - Adds a help button, if defined, which runs the code string, when clicked.",
            "exit: String - Code to run, when the close button is clicked.",
            "code: String - Code to run after the dialog is opened. The local variable _dialog, which returns a Boolean, indicating whether the dialog was successfully created or not, can be used in the code."
        ],
        "return_value": ["Boolean - Indicates whether dialog was successfully created or not."]
    },
    "fn_vbs_inAngleSector": {
        "id": "1509951",
        "title": "fn_vbs_inAngleSector",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_inAngleSector",
        "example": "",
        "syntax": "",
        "docSyntax": "[pos1, direction, width, pos2] call fn_vbs_inAngleSector",
        "parameters": [
            "pos1: Position-2 - Center position.",
            "direction: Number - Checked direction.",
            "width: Number - Checked angle (in degrees).",
            "pos2: Position-2 - Checked position."
        ],
        "return_value": ["Boolean"]
    },
    "fn_vbs_indicateValueTrend": {
        "id": "1509948",
        "title": "fn_vbs_indicateValueTrend",
        "version": "1.62",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_indicateValueTrend",
        "example": "",
        "syntax": "",
        "docSyntax": "[oldValue, newValue, label] call fn_vbs_indicateValueTrend",
        "parameters": [
            "oldValue: Number - Old value.",
            "newValue: Number - New value.",
            "label: String - Descriptive word, shown after the value."
        ],
        "return_value": ["String"]
    },
    "fn_vbs_infobubble": {
        "id": "1509949",
        "title": "fn_vbs_infobubble",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_infobubble",
        "example": "",
        "syntax": "",
        "docSyntax": "[target, text, <dimensions>, <type>, <time>] call fn_vbs_infobubble",
        "parameters": [
            "target: Object - object info bubble will hover next to",
            "text: String - text of bubble",
            "dimensions: Array - Array (in the format lines, width_mult, font_mult]) defining the size of the displayed bubble.lines - The bubble holds this many lines of text vertically.width_mult - Default bubble width is multiplied by this.font_mult - Default font size is multiplied by this (optional, If omitted, or if an empty array is passed, defaults are used: [4, 1, 1]).",
            "lines - The bubble holds this many lines of text vertically.",
            "width_mult - Default bubble width is multiplied by this.",
            "font_mult - Default font size is multiplied by this (optional, If omitted, or if an empty array is passed, defaults are used: [4, 1, 1]).",
            "type: Number - What type of bubble to use (optional, default: 0):0 - Rectangular bubble1 - Speech bubble.",
            "0 - Rectangular bubble",
            "1 - Speech bubble.",
            "time: Number - Number of seconds to display the bubble (optional, if omitted, the time is determined from the text length)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_injury_blindness": {
        "id": "1509946",
        "title": "fn_vbs_injury_blindness",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_injury_blindness",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, duration] call fn_vbs_injury_blindness",
        "parameters": ["unit: Object - Unit to blind.", "duration: Number - Seconds to blind for."],
        "return_value": ["Nothing"]
    },
    "fn_vbs_injury_deafness": {
        "id": "1509947",
        "title": "fn_vbs_injury_deafness",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_injury_deafness",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, duration, tinnitus] call fn_vbs_injury_deafness",
        "parameters": [
            "unit: Object - Unit to deafen,",
            "duration: Number - Seconds to deafen for.",
            "tinnitus: Boolean - Should an ear-ringing sound be played? (optional, only a maximum of 30 seconds of ringing is available)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_injury_dizziness": {
        "id": "1509944",
        "title": "fn_vbs_injury_dizziness",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_injury_dizziness",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, duration, magnitude] call fn_vbs_injury_dizziness",
        "parameters": [
            "unit: Object - Unit to be dizzy,",
            "duration: Number - Seconds to be dizzy for.",
            "magnitude: Number - How dizzy the unit is, between 0-1 (1 means maximum dizziness, same as a stun grenade). The magnitude drops to 0 over the duration of the effect."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_injury_knockout": {
        "id": "1509945",
        "title": "fn_vbs_injury_knockout",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_injury_knockout",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, ko_duration, dizzy_duration, dizzy_magnitude] call fn_vbs_injury_knockout",
        "parameters": [
            "unit: Object - Unit to be knocked out.",
            "ko_duration: Number - Seconds to be knocked out for.",
            "dizzy_duration: Number - How long to be dizzy for after waking up (optional, determined automatically if omitted).",
            "dizzy_magnitude: Number - How dizzy to be after regaining consciousness (0-1) (optional, determined automatically, if omitted)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_injury_thump": {
        "id": "1509942",
        "title": "fn_vbs_injury_thump",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_injury_thump",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, magnitude] call fn_vbs_injury_thump",
        "parameters": [
            "unit: Object - Unit to have the screen thumped.",
            "magnitude: Number - How much to \"thump\" the player screen (0-1, 1 means maximum screen thump)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_insertWaypoint": {
        "id": "1509943",
        "title": "fn_vbs_insertWaypoint",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_insertWaypoint",
        "example": "",
        "syntax": "",
        "docSyntax": "[group, index, position, radius] call fn_vbs_insertWaypoint",
        "parameters": [
            "group: Group -\u00a0The group.",
            "index: Number - Group index.",
            "position: Position - Data Type - Defaults to [0,0,0] if omitted (optional).",
            "radius: Number - Radius around position to randomly create the waypoint."
        ],
        "return_value": ["Waypoint"]
    },
    "fn_vbs_isCollisionIWA": {
        "id": "1509940",
        "title": "fn_vbs_isCollisionIWA",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isCollisionIWA",
        "example": "",
        "syntax": "",
        "docSyntax": "[target, animation, phase] call fn_vbs_isCollisionIWA",
        "parameters": [
            "target: Object - Object to test.",
            "animation: String - Name of animation to test.",
            "phase: Number - Target phase of animation to test (0-1)."
        ],
        "return_value": [
            "Boolean - Returns true, if there would be a collision, false if the animation would be executed without collision, or does not exist."
        ]
    },
    "fn_vbs_isGroupEmpty": {
        "id": "1509941",
        "title": "fn_vbs_isGroupEmpty",
        "version": "3.8",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isGroupEmpty",
        "example": "",
        "syntax": "",
        "docSyntax": "grp call fn_vbs_isGroupEmpty",
        "parameters": ["grp: Group - Group to check."],
        "return_value": ["Boolean - Returns true if the group is empty, false otherwise."]
    },
    "fn_vbs_isInFrontOf": {
        "id": "1509970",
        "title": "fn_vbs_isInFrontOf",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isInFrontOf",
        "example": "",
        "syntax": "",
        "docSyntax": "[object1, object2, offset] call fn_vbs_isInFrontOf",
        "parameters": [
            "object1: Object - First object.",
            "object2: Object - Second object.",
            "offset: Number - Bigger than 0, if the position of object1 is not the front of object1."
        ],
        "return_value": ["Boolean"]
    },
    "fn_vbs_isKindOf": {
        "id": "1509971",
        "title": "fn_vbs_isKindOf",
        "version": "1.48",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isKindOf",
        "example": "",
        "syntax": "",
        "docSyntax": "[config, child, parent] call fn_vbs_isKindOf",
        "parameters": [
            "config: Config-2 - Configuration file to check.",
            "child: Object, Config-2 or String - Class whose inheritance is checked. Can be an object, a configuration entry, or a class name.",
            "parent: Config-2, String or Array - Parent class that is checked. Can be a configuration entry or a class name, or an array containing several of either."
        ],
        "return_value": ["Boolean - Returns true, if child inherits from parent."]
    },
    "fn_vbs_isPreview": {
        "id": "1509968",
        "title": "fn_vbs_isPreview",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isPreview",
        "example": "",
        "syntax": "",
        "docSyntax": "call fn_vbs_isPreview",
        "parameters": [""],
        "return_value": ["Boolean"]
    },
    "fn_vbs_isSystemItemActive": {
        "id": "1509969",
        "title": "fn_vbs_isSystemItemActive",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isSystemItemActive",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_isSystemItemActive",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["Boolean - Returns true, if active, or nil, if the item does not exist or cannot be active."]
    },
    "fn_vbs_isSystemItemEnabled": {
        "id": "1509966",
        "title": "fn_vbs_isSystemItemEnabled",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isSystemItemEnabled",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_isSystemItemEnabled",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["Boolean - Returns true, if enabled, or nil, if the item does not exist."]
    },
    "fn_vbs_isSystemItemLocal": {
        "id": "1509967",
        "title": "fn_vbs_isSystemItemLocal",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isSystemItemLocal",
        "example": "",
        "syntax": "",
        "docSyntax": "[systemItemID] call fn_vbs_isSystemItemLocal",
        "parameters": ["systemItemID: Number - The system item ID."],
        "return_value": ["Boolean - Returns true if the item is local, false if public."]
    },
    "fn_vbs_isTurretLocked": {
        "id": "1509964",
        "title": "fn_vbs_isTurretLocked",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isTurretLocked",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, turret] call fn_vbs_isTurretLocked",
        "parameters": ["vehicle: Object - The vehicle.", "turret: Array - Turret path."],
        "return_value": ["Boolean - Returns true, if locked, false otherwise."]
    },
    "fn_vbs_isUnmannedVehicle": {
        "id": "1509965",
        "title": "fn_vbs_isUnmannedVehicle",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isUnmannedVehicle",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_isUnmannedVehicle",
        "parameters": ["vehicle: Object or String - The vehicle or vehicle class to check."],
        "return_value": ["0 - Not unmanned", "1 - Unmanned aerial vehicle", "2 - Unmanned ground vehicle"]
    },
    "fn_vbs_isVisible": {
        "id": "1509962",
        "title": "fn_vbs_isVisible",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_isVisible",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, check, rate, except] call fn_vbs_isVisible",
        "parameters": [
            "array: Array (PositionAGL format)",
            "check: Object or Array (PositionAGL format)",
            "rate: Number (optional) - Value between 0 and 1, the higher the value, the more boundingBox edges have to be visible for this function to return true. The standard rate is 0.1.",
            "except: Array (optional) - Array with objects which are not taken into account as view blockers."
        ],
        "return_value": ["Boolean"]
    },
    "fn_vbs_joinString": {
        "id": "1509963",
        "title": "fn_vbs_joinString",
        "version": "3.5",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_joinString",
        "example": "",
        "syntax": "",
        "docSyntax": "[strings, separator] call fn_vbs_joinString",
        "parameters": [
            "strings: Array of String - List of sub-strings that should be joined.",
            "separator: String - Separator to be inserted between each sub-string (optional, default: \"\")."
        ],
        "return_value": ["String - Joined string"]
    },
    "fn_vbs_lastName": {
        "id": "1509960",
        "title": "fn_vbs_lastName",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_lastName",
        "example": "",
        "syntax": "",
        "docSyntax": "unit call fn_vbs_lastName",
        "parameters": ["unit: Object - Unit whose name is returned."],
        "return_value": ["String"]
    },
    "fn_vbs_lbInsert": {
        "id": "1509961",
        "title": "fn_vbs_lbInsert",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_lbInsert",
        "example": "",
        "syntax": "",
        "docSyntax": "[control, text, index] call fn_vbs_lbInsert",
        "parameters": [
            "control: Control - Listbox control.",
            "text: String - Text of new listbox element to insert.",
            "index: Number - Index at which to insert new element."
        ],
        "return_value": ["Number"]
    },
    "fn_vbs_linePlaneIntersect": {
        "id": "1509958",
        "title": "fn_vbs_linePlaneIntersect",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_linePlaneIntersect",
        "example": "",
        "syntax": "",
        "docSyntax": "[lineVector, linePos, planeVector, planePos] call fn_vbs_linePlaneIntersect",
        "parameters": [
            "lineVector: Vector3D - Direction of line.",
            "linePos: PositionASL - Origin of line.",
            "planeVector: Vector3D - Direction (normal) of plane.",
            "planePos: PositionASL - A point on the plane."
        ],
        "return_value": ["PositionASL - Intersection of line and plane. Empty array, if no intersection."]
    },
    "fn_vbs_listPlayers": {
        "id": "1509959",
        "title": "fn_vbs_listPlayers",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_listPlayers",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call fn_vbs_listPlayers",
        "parameters": [""],
        "return_value": ["Array"]
    },
    "fn_vbs_listTurrets": {
        "id": "1509956",
        "title": "fn_vbs_listTurrets",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_listTurrets",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, path] call fn_vbs_listTurrets",
        "parameters": [
            "vehicle: Object - Object to test.",
            "path: Boolean - If true, then returns turret paths (array); if false, then return configuration entries (optional, default: true)."
        ],
        "return_value": ["Array - Either turret paths or configuration entries (depending on the path parameter)."]
    },
    "fn_vbs_loadVehicle": {
        "id": "1509957",
        "title": "fn_vbs_loadVehicle",
        "version": "1.61",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_loadVehicle",
        "example": "",
        "syntax": "",
        "docSyntax": "[object, position, vehicle] call fn_vbs_loadVehicle",
        "parameters": [
            "object: Object - The vehicle or unit to be moved.",
            "position: Position-2 - The position to move to (in model space coordinates).",
            "vehicle: Object - The object to board,"
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_loadVehicleToVehicleHold": {
        "id": "11567256",
        "title": "fn_vbs_loadVehicleToVehicleHold",
        "version": "18.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_loadVehicleToVehicleHold",
        "example": "",
        "syntax": "",
        "docSyntax": "[cv, cargoSpace, lv] call fn_vbs_loadVehicleToVehicleHold",
        "parameters": [
            "cv: Object - Cargo vehicle to load onto.",
            "cargoSpace: String - Configured name of the cargo space. For all currently configured cargo vehicles, the cargo space name \"CargoCompartment_01\" is always used.",
            "lv: Object - Vehicle to load."
        ],
        "return_value": ["Boolean - Returns true, if loaded successfully; false, otherwise."]
    },
    "fn_vbs_lockTurretDir": {
        "id": "1509986",
        "title": "fn_vbs_lockTurretDir",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_lockTurretDir",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, turret, azimuth, elevation, smooth] call fn_vbs_lockTurretDir",
        "parameters": [
            "vehicle: Object - Vehicle the turret is on.",
            "turret: Array - Turret path.",
            "azimuth: Number - Direction relative to vehicle hull.",
            "elevation: Number - Elevation above horizontal.",
            "smooth: Boolean - If true, the turret smoothly rotates into position before locking. If false, the turret instantly moves into position (optional, default: true)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_lowestNum": {
        "id": "1509987",
        "title": "fn_vbs_lowestNum",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_lowestNum",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_lowestNum",
        "parameters": ["array: Array - Array of Number."],
        "return_value": ["Number"]
    },
    "fn_vbs_magnitude": {
        "id": "1509984",
        "title": "fn_vbs_magnitude",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_magnitude",
        "example": "",
        "syntax": "",
        "docSyntax": "vector call fn_vbs_magnitude",
        "parameters": ["vector: Array of Number - The vector."],
        "return_value": ["Number"]
    },
    "fn_vbs_magnitudeSqr": {
        "id": "1509985",
        "title": "fn_vbs_magnitudeSqr",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_magnitudeSqr",
        "example": "",
        "syntax": "",
        "docSyntax": "vector call fn_vbs_magnitudeSqr",
        "parameters": ["vector: Array of Number - The vector."],
        "return_value": ["Number - Square of the vector magnitude"]
    },
    "fn_vbs_matrixMultiply": {
        "id": "1509982",
        "title": "fn_vbs_matrixMultiply",
        "version": "2.11",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_matrixMultiply",
        "example": "",
        "syntax": "",
        "docSyntax": "[matrix1, matrix2] call fn_vbs_matrixMultiply",
        "parameters": ["matrix1: Array - Array with n*m elements", "matrix2: Array - Array with m*p elements"],
        "return_value": [
            "Array - Array is empty, if invalid inputs (array has zero dimensions or dimensions do not match)."
        ]
    },
    "fn_vbs_moveIn": {
        "id": "1509983",
        "title": "fn_vbs_moveIn",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_moveIn",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, vehicle, position, noAI, silent] call fn_vbs_moveIn",
        "parameters": [
            "unit: Object - The unit which gets in.",
            "vehicle: Object - The vehicle to move in.",
            "position (optional): String - The position to move in, one of \"driver\", \"gunner\", \"commander\", \"cargohatch\" (only hatches), \"cargo\" (copilot, carg, and hatches). If no position is provided, the first empty seat following this priority list (\"driver\" first, \"cargo\" last) is assumed.",
            "noAI (optional): Boolean - If true, only move to empty seats; if false, move to an AI seat, if nothing else is free (default: false).",
            "silent (optional, V1.21+): Number - If 1, show no messages; if 0, show messages when a problem occurs (default: 0)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_nearestNum": {
        "id": "1509980",
        "title": "fn_vbs_nearestNum",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_nearestNum",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, target] call fn_vbs_nearestNum",
        "parameters": ["array: Array - Array of Number", "target: Number - Target number."],
        "return_value": ["Number"]
    },
    "fn_vbs_nearestRoad": {
        "id": "1509981",
        "title": "fn_vbs_nearestRoad",
        "version": "1.63",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_nearestRoad",
        "example": "",
        "syntax": "",
        "docSyntax": "[center,radius] call fn_vbs_nearestRoad",
        "parameters": [
            "center: Object or Position-2 - Origin around which to search.",
            "radius: Number - Maximum distance to search (optional, default: whole map)."
        ],
        "return_value": ["Object - Road found (objNull, if none is found)"]
    },
    "fn_vbs_objectCargo_add": {
        "id": "1509978",
        "title": "fn_vbs_objectCargo_add",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_objectCargo_add",
        "example": "",
        "syntax": "",
        "docSyntax": "[cargo, container] call fn_vbs_objectCargo_add",
        "parameters": [
            "cargo: Array of Object or String - Array of objects (or object class names) to add to the cargo.",
            "container: Object - Person, vehicle, or object to add to the cargo."
        ],
        "return_value": ["Boolean - Returns true, if successfully added to the cargo, false otherwise."]
    },
    "fn_vbs_objectCargo_get": {
        "id": "1509979",
        "title": "fn_vbs_objectCargo_get",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_objectCargo_get",
        "example": "",
        "syntax": "",
        "docSyntax": "container call fn_vbs_objectCargo_get",
        "parameters": ["container: Object - Person, vehicle, or object to find the cargo of."],
        "return_value": ["Nothing"]
    },
    "fn_vbs_objectCargo_remove": {
        "id": "1509976",
        "title": "fn_vbs_objectCargo_remove",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_objectCargo_remove",
        "example": "",
        "syntax": "",
        "docSyntax": "[cargo, dropPosition] call fn_vbs_objectCargo_remove",
        "parameters": [
            "cargo: Array of Object - Objects to remove from the cargo.",
            "dropPosition: Position3D - Position to move the cargo to, once the removed content is dropped. If omitted, the object is dropped in front of its container (optional)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_observation": {
        "id": "1509977",
        "title": "fn_vbs_observation",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_observation",
        "example": "",
        "syntax": "",
        "docSyntax": "[target, text, range, dimensions, condition] call fn_vbs_observation",
        "parameters": [
            "target: Object - Object to observe.",
            "text: String - Observation text.",
            "range: Number - Player must be this close to make the observation. Optics magnification is taken into account, allowing the observation to be made from further away.",
            "dimensions: Array - Array defining the size of the displayed bubble. The format is: [lines, width_mult, font_mult]lines - The observation bubble holds this many lines of text vertically.width_mult - Default bubble width is multiplied by this.font_mult (optional) - Default font size is multiplied by this. If omitted, or if an empty array is specified, the defaults are: [4, 1, 1]",
            "lines - The observation bubble holds this many lines of text vertically.",
            "width_mult - Default bubble width is multiplied by this.",
            "font_mult (optional) - Default font size is multiplied by this. If omitted, or if an empty array is specified, the defaults are: [4, 1, 1]",
            "condition: Code (optional) - Condition that must be met for observation to be triggered. Target object is specified using the _this variable."
        ],
        "return_value": [
            "Script - If the terminate command is used on the return value (before the observation is triggered), then the observation is unloaded from the object"
        ]
    },
    "fn_vbs_onPlayerVehicleChange": {
        "id": "1509974",
        "title": "fn_vbs_onPlayerVehicleChange",
        "version": "1.70",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_onPlayerVehicleChange",
        "example": "",
        "syntax": "",
        "docSyntax": "[player, code, data, optionalEvents] call fn_vbs_onPlayerVehicleChange",
        "parameters": [
            "player: Object - The player to monitor for vehicle control.",
            "code: Code - The code to run, when the player exits / loses control of the vehicle. The array _this is available in the code, and contains the following elements:player: Object - The player.vehicle: Object - The vehicle.data: Array - Any extra data that is passed to the code (using the data argument).",
            "player: Object - The player.",
            "vehicle: Object - The vehicle.",
            "data: Array - Any extra data that is passed to the code (using the data argument).",
            "data: Array - Data that can be passed to the code section.",
            "optionalEvents: Array of String - Optional events that should trigger the event handler. The strings can be in any order."
        ],
        "return_value": [
            "Number - The index used in the alternative syntax, to remove this event handler (-1 is returned, if no event handler is added)."
        ]
    },
    "fn_vbs_openSystemsMenu": {
        "id": "1509975",
        "title": "fn_vbs_openSystemsMenu",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_openSystemsMenu",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbs_openSystemsMenu",
        "parameters": ["vehicle: Object - The vehicle."],
        "return_value": ["Boolean - Returns false, if the dialog is already open."]
    },
    "fn_vbs_orbitCamera": {
        "id": "1509972",
        "title": "fn_vbs_orbitCamera",
        "version": "3.5",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_orbitCamera",
        "example": "",
        "syntax": "",
        "docSyntax": "[target, camera, minDist, maxDist, condition, exticode] call fn_vbs_orbitCamera",
        "parameters": [
            "target: Object - Target the camera should point at. Target should be stationary, as the camera becomes unstable, if the target is moving. Be aware that the camera points at the origin of the object, which might be the feet, for people.",
            "camera: Object - If a camera already exists, passing it to the function prevents a new one from being created (optional, default: nil).",
            "minDist: Number - Minimum distance allowed, when moving the camera (as the camera can only be moved up and down, this is normally the minimal height) (optional, default: 0.2).",
            "maxDist: Number - Maximum distance allowed when moving the camera. (As the camera can only be moved up and down, this is normally the maximal height.) (optional, default: 100)",
            "condition: Code - Script condition that has to be fulfilled for the camera to exit. If undefined, pressing the Optics key (normally, V) exits the function. Be aware that passing an empty code string ({}) is not the same as an undefined parameter - if condition is empty, you will not be able to exit the function. Also, the whole function is spawn-based - it returns right away to the calling script, even if any of the exit conditions are not fulfilled yet. So, if certain actions outside the function should only happen after the condition, it also has to be checked externally (optional, default: {{isKeyPressed _x} count actionKeys \"Optics\" > 0})",
            "exitcode: Code - Script command(s) to execute when function exits. Be aware that, if you define your own exit code, the function does not destroy the camera (as that is the default exit code, which you are overriding). In that case, you would have to use the returned camera object, and destroy it manually (optional, default: {_camera cameraEffect [\"TERMINATE\",\"BACK\"]; camDestroy _camera;})."
        ],
        "return_value": [
            "Object - Camera used in the orbit function (either the one that is passed originally, or the one that is created later). Do not destroy the camera outside of the function, unless a custom exit code is defined. Otherwise, you will not be able to exit the function."
        ]
    },
    "fn_vbs_placeOnSurface": {
        "id": "1509973",
        "title": "fn_vbs_placeOnSurface",
        "version": "1.54",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_placeOnSurface",
        "example": "",
        "syntax": "",
        "docSyntax": "object call fn_vbs_placeOnSurface",
        "parameters": ["object: Object - Object to place on the surface."],
        "return_value": ["Nothing"]
    },
    "fn_vbs_positionObjectRelToObject": {
        "id": "1510002",
        "title": "fn_vbs_positionObjectRelToObject",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_positionObjectRelToObject",
        "example": "",
        "syntax": "",
        "docSyntax": "[child, parent, offset, posChild, posParent, repos] call fn_vbs_positionObjectRelToObject",
        "parameters": [
            "child: Object - Object to position.",
            "parent: Object - Object that the new position is relative to.",
            "offset: Vector3D - The [x,y,z] offset, relative to the parent origin, to move the child object to.",
            "posChild: Vector3D or String - Either an offset to the child origin, or its memory point, to consider for the purpose of the position calculations (optional, default: origin, [0,0,0]).",
            "posParent: Vector3D or String - Either an offset to the parent origin, or its memory point, to consider for the purpose of the position calculations (optional, default: origin, [0,0,0]).",
            "repos: Boolean - If true, the child is repositioned at the calculated location; if false, then the new position is only calculated and returned (optional, default: true)."
        ],
        "return_value": [
            "PositionASL - Calculated, absolute position of child object (if repos is true, then it is positioned at that location)."
        ]
    },
    "fn_vbs_posToCoordString": {
        "id": "1510003",
        "title": "fn_vbs_posToCoordString",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_posToCoordString",
        "example": "",
        "syntax": "",
        "docSyntax": "call fn_vbs_posToCoordString [coordPos, coordType, precisionVBS, precisionLL, precisionLLMS]",
        "parameters": [
            "coordPos: Array - Source VBS ASL2 position.",
            "coordType: Array - Coordinate system used for output.",
            "precisionVBS: Number - Number of decimal points to be shown (applies only to VBS coordinates), use nil to use the default value (optional).",
            "precisionLL: Number - Number of decimal points to be shown (applies only to LL coordinates), use nil to use the default value (optional).",
            "precisionLLMS: Number - Number of decimal points to be shown (applies only to LLMS coordinates), use nil to use the default value (optional)."
        ],
        "return_value": [" String - The VBS position translated into a string of a given coordinate system. "]
    },
    "fn_vbs_putUnitsInVehicle": {
        "id": "1510000",
        "title": "fn_vbs_putUnitsInVehicle",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_putUnitsInVehicle",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, units] call fn_vbs_putUnitsInVehicle",
        "parameters": [
            "vehicle: Object -  The vehicle to occupy.",
            "units: Array of Object - The units which should be moved in."
        ],
        "return_value": [
            " Array of Object - If more units were passed than fit into the vehicle, the leftover units will be returned in this array. Otherwise an empty array is returned. "
        ]
    },
    "fn_vbs_randomIndex": {
        "id": "1510001",
        "title": "fn_vbs_randomIndex",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_randomIndex",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_randomIndex",
        "parameters": ["array: Array"],
        "return_value": ["Number - Index of an element in the given array."]
    },
    "fn_vbs_randomInt": {
        "id": "1509998",
        "title": "fn_vbs_randomInt",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_randomInt",
        "example": "",
        "syntax": "",
        "docSyntax": "[limit1, limit2] call fn_vbs_randomInt",
        "parameters": ["limit1: Number - First endpoint (inclusive).", "limit2: Number - Second endpoint (inclusive)."],
        "return_value": ["Number"]
    },
    "fn_vbs_randomNum": {
        "id": "1509999",
        "title": "fn_vbs_randomNum",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_randomNum",
        "example": "",
        "syntax": "",
        "docSyntax": "[limit1, limit2] call fn_vbs_randomNum",
        "parameters": ["limit1: Number - First endpoint (inclusive).", "limit2: Number - Second endpoint (inclusive)."],
        "return_value": ["Number"]
    },
    "fn_vbs_randomPos": {
        "id": "1509996",
        "title": "fn_vbs_randomPos",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_randomPos",
        "example": "",
        "syntax": "",
        "docSyntax": "[center, mindist, maxdist, special] call fn_vbs_randomPos",
        "parameters": [
            "center: Object or Position-2 - Origin around which the random position is created.",
            "mindist: Number - Minimum distance from center (can be zero).",
            "maxdist: Number - Maximum distance from center.",
            "special: Number - Return only special types of locations (optional, V1.30+):0: Any land position (default).1: Position on road.2: Ground-floor building position.3: Random building position.",
            "0: Any land position (default).",
            "1: Position on road.",
            "2: Ground-floor building position.",
            "3: Random building position."
        ],
        "return_value": ["Position3D"]
    },
    "fn_vbs_relativeDirTo": {
        "id": "1509997",
        "title": "fn_vbs_relativeDirTo",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_relativeDirTo",
        "example": "",
        "syntax": "",
        "docSyntax": "[object, checkpoint] call fn_vbs_relativeDirTo",
        "parameters": [
            "object: Object - Object to find the direction from.",
            "checkpoint\u00a0: Object or Position-2 - Object / position to find the direction to."
        ],
        "return_value": ["Number - Number of degrees the object need to rotate to be facing checkpoint."]
    },
    "fn_vbs_relativeModelPos": {
        "id": "1509994",
        "title": "fn_vbs_relativeModelPos",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_relativeModelPos",
        "example": "",
        "syntax": "",
        "docSyntax": "[position, object, angle, center] call fn_vbs_relativeModelPos",
        "parameters": [
            "position: Position-2 - Point to rotate.",
            "object: Object - Object used to return world coordinates.",
            "angle: Number - Angle by which the point is rotated.",
            "center: Position-2 - Position around which to rotate point (optional, default: Object center)."
        ],
        "return_value": ["Position-2"]
    },
    "fn_vbs_relPos": {
        "id": "1509995",
        "title": "fn_vbs_relPos",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_relPos",
        "example": "",
        "syntax": "",
        "docSyntax": "[point, distance, direction, offset] call fn_vbs_relPos",
        "parameters": [
            "point: Object or Position-2 - Position to find relative to.",
            "distance: Number - Distance away from point1.",
            "direction: Number - Compass direction from point1.",
            "offset: Number - Additional distance offset, at a 90-degree angle, added to the relative position."
        ],
        "return_value": ["Position-2 - Relative position from point1."]
    },
    "fn_vbs_removeActionEx": {
        "id": "1509992",
        "title": "fn_vbs_removeActionEx",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_removeActionEx",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, index] call fn_vbs_removeActionEx",
        "parameters": [
            "unit: Object or Array - Unit to remove action from (or [unit, id] to remove actions, with the specified ID - see fn vbs addActionEx).",
            "index: Number - Index of action to remove (as returned by fn vbs addActionEx)."
        ],
        "return_value": ["Boolean - Returns true, if the action is removed; false, if action does not exist."]
    },
    "fn_vbs_removeIndex": {
        "id": "1509990",
        "title": "fn_vbs_removeIndex",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_removeIndex",
        "example": "",
        "syntax": "",
        "docSyntax": "[arrayIn, removalIndex, endIndex] call fn_vbs_removeIndex",
        "parameters": [
            "arrayIn: Array - Source array.",
            "removalIndex: Number or Array - Which element/s should be removed (in case several elements should be removed, an array is passed).",
            "endIndex: Number - If included, all elements from removalIndex to endIndex are removed (optional)."
        ],
        "return_value": ["Array - Modified array."]
    },
    "fn_vbs_removeSysEventHandler": {
        "id": "1509993",
        "title": "fn_vbs_removeSysEventHandler",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_removeSysEventHandler",
        "example": "",
        "syntax": "",
        "docSyntax": "[type, index] call fn_vbs_removeSysEventHandler",
        "parameters": ["type: String - Type of event handler to remove.", "index: Number - Index of event to remove."],
        "return_value": [
            "Boolean - Returns true, if the event is removed; false, if the event does not exist (for example, a bad index is passed)."
        ]
    },
    "fn_vbs_removeSystemItem": {
        "id": "1509991",
        "title": "fn_vbs_removeSystemItem",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_removeSystemItem",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemID, systemItemID, remRef] call fn_vbs_removeSystemItem",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemID: String - The system ID.",
            "systemItemID: String - The Systems-Menu item ID.",
            "remRef: Boolean - Remove reference to itself from the parent item (optional, default: true)."
        ],
        "return_value": ["Boolean - Returns false, if the system or the item do not exist."]
    },
    "fn_vbs_repairHitpart": {
        "id": "1509988",
        "title": "fn_vbs_repairHitpart",
        "version": "17.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_repairHitpart",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, part] call fn_vbs_repairHitpart",
        "parameters": [
            "vehicle: Object - Vehicle to repair.",
            "part: String - Component name or error code (a component can have several error codes)."
        ],
        "return_value": [" Nothing "]
    },
    "fn_vbs_replaceString": {
        "id": "1509762",
        "title": "fn_vbs_replaceString",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_replaceString",
        "example": "",
        "syntax": "",
        "docSyntax": "[base, find, replace, case, start] call fn_vbs_replaceString",
        "parameters": [
            "base: String - Base string to find / replace in.",
            "find: String - String to search for.",
            "replace: String - String to replace the find string with.",
            "case (V1.22+): Boolean - Case-sensitive or not (optional, default: false).",
            "start (V1.34+): Number - Character index to start the find / replace operation from (optional, default: 0, which indicates the first character)."
        ],
        "return_value": ["String"]
    },
    "fn_vbs_resizeControls": {
        "id": "1509989",
        "title": "fn_vbs_resizeControls",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_resizeControls",
        "example": "",
        "syntax": "",
        "docSyntax": "[actionType, [edge control], edgeType, [marginXmin, marginXmax, marginYmin, marginYmax], controlGroup, cursorName, onMouseEnter, onMouseMoving, onMouseExit, onMouseButtonDown, onMouseButtonUp, toolTip, avoidGroup] call fn_vbs_resizeControls",
        "parameters": [
            "actionType: Number - 0 means install script, 1 means uninstall script.",
            "[edge control]: Array - Array containing the edge Control to grab on to.",
            "edgeType: Number - 1-left, 2-right, 4-top, 8-bottom and corner combinations are added together as such: 1 + 8.",
            "[marginXmin, marginXmax, marginYmin, marginYmax]: Number Array - Margins which prevent resizing beyond those points.",
            "controlGroup: Number Array - List of control IDCs that are resized by dragging the edge, first one must be largest / parent. Since V1.40+, this array can accept sub-arrays listing the IDC numbers of the controlGroup controls to be resized (the first IDC must be of the actual controlGroup).",
            "cursorName: String - Cursor to display on mouse hover (\"\" for no change).",
            "onMouseEnter: Code - Additional code to execute during the onMouseEnter event handler execution ({} for none).",
            "onMouseMoving: Code - Additional code to execute during the onMouseMoving event handler execution ({} for none).",
            "onMouseExit: Code - Additional code to execute during the onMouseExit event handler execution ({} for none).",
            "onMouseButtonDown: Code - Additional code to execute during the onMouseButtonDown event handler ({} for none).",
            "onMouseButtonUp: Code - Additional code to execute during the onMouseButtonUp event handler ({} for none).",
            "toolTip: String - Tooltip to set for edge control (\"\" for none).",
            "avoidGroup: Number Array - List of control IDCs to block the resizing action ([] for empty, mandatory in V1.40+)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_rotatePoint": {
        "id": "1509763",
        "title": "fn_vbs_rotatePoint",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_rotatePoint",
        "example": "",
        "syntax": "",
        "docSyntax": "[center, angle, pos] call fn_vbs_rotatePoint",
        "parameters": [
            "center: Position-2 or Object - Center around which the point is rotated.",
            "angle: Number - Rotation angle (positive or negative) in degrees.",
            "pos: Position-2 - Point that is rotated."
        ],
        "return_value": ["Position-2 - Rotated position."]
    },
    "fn_vbs_rotateVector2D": {
        "id": "1509760",
        "title": "fn_vbs_rotateVector2D",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_rotateVector2D",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector, angle] call fn_vbs_rotateVector2D",
        "parameters": ["vector: Array - The vector.", "angle: Number - The rotation angle (in degrees)."],
        "return_value": ["Array"]
    },
    "fn_vbs_rotateVector3D": {
        "id": "1509761",
        "title": "fn_vbs_rotateVector3D",
        "version": "1.60",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_rotateVector3D",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector, rotation_matrix] call fn_vbs_rotateVector3D",
        "parameters": [
            "vector: Vector3D - Vector to rotate.",
            "rotation_matrix: Vector3D - Rotation matrix to apply to the vector. Created with the fn vbs rotationMatrix function."
        ],
        "return_value": ["Vector3D"]
    },
    "fn_vbs_rotationMatrix": {
        "id": "1509758",
        "title": "fn_vbs_rotationMatrix",
        "version": "1.60",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_rotationMatrix",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector, angle_offset] call fn_vbs_rotationMatrix",
        "parameters": ["vector: Vector3D - Vector to rotate.", "angle_offset: Number - Angle to offset the vector by."],
        "return_value": ["Vector3D"]
    },
    "fn_vbs_selectedWeaponType": {
        "id": "1509759",
        "title": "fn_vbs_selectedWeaponType",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_selectedWeaponType",
        "example": "",
        "syntax": "",
        "docSyntax": "unit call fn_vbs_selectedWeaponType",
        "parameters": ["unit: Object - Player or AI."],
        "return_value": ["String - One of \"PRIMARY\", \"SECONDARY\", \"PISTOL\", \"NONE\"."]
    },
    "fn_vbs_selectRandom": {
        "id": "1509756",
        "title": "fn_vbs_selectRandom",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_selectRandom",
        "example": "",
        "syntax": "",
        "docSyntax": "array call fn_vbs_selectRandom",
        "parameters": ["array: Array - Array to select from"],
        "return_value": ["Anything - Random element from the array."]
    },
    "fn_vbs_selectRelative": {
        "id": "1509757",
        "title": "fn_vbs_selectRelative",
        "version": "1.22",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_selectRelative",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, idx] call fn_vbs_selectRelative",
        "parameters": [
            "array: Array - The array.",
            "idx: Number - Element index (0 is the index of the first element)."
        ],
        "return_value": ["Anything"]
    },
    "fn_vbs_setComplement": {
        "id": "1509754",
        "title": "fn_vbs_setComplement",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setComplement",
        "example": "",
        "syntax": "",
        "docSyntax": "[A, B] call fn_vbs_setComplement",
        "parameters": ["A: Array - Set A.", "B: Array - Set B."],
        "return_value": ["Array - Complement of B in A."]
    },
    "fn_vbs_setDefaultSystem": {
        "id": "1509755",
        "title": "fn_vbs_setDefaultSystem",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setDefaultSystem",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, path] call fn_vbs_setDefaultSystem",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "path: Array - Path to the default system. Use an empty array to set no default system."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_setEach": {
        "id": "1509752",
        "title": "fn_vbs_setEach",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setEach",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, condition] call fn_vbs_setEach",
        "parameters": ["array: Array - The array.", "condition: Code - The code to run."],
        "return_value": ["Array"]
    },
    "fn_vbs_setGunPosition": {
        "id": "1509753",
        "title": "fn_vbs_setGunPosition",
        "version": "1.50",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setGunPosition",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, turret, [azimuth, elevation], notstabilized, rounds] call fn_vbs_setGunPosition",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "turret: Array - Turret path.",
            "azimuth: Number - Direction relative to hull.",
            "elevation: Number - Elevation above the horizontal.",
            "notstabilized: Boolean - Turn off turret stabilization (optional, default: true).",
            "rounds: Number - Number of rounds to fire (optional, default: 0)."
        ],
        "return_value": [
            "Boolean - Returns true, if firing is successful, or, if the function is called with only the vehicle as a parameter, if the vehicle is currently engaged in a firing sequence."
        ]
    },
    "fn_vbs_setHail": {
        "id": "1509750",
        "title": "fn_vbs_setHail",
        "version": "3.4.M, 3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setHail",
        "example": "",
        "syntax": "",
        "docSyntax": "[intensity] call fn_vbs_setHail",
        "parameters": ["intensity: Number - Hail intensity in the range 0-1 (0 means no hail; 1 is maximum hail)."],
        "return_value": ["Nothing"]
    },
    "fn_vbs_setIntersection": {
        "id": "1509751",
        "title": "fn_vbs_setIntersection",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setIntersection",
        "example": "",
        "syntax": "",
        "docSyntax": "[A, B] call fn_vbs_setIntersection",
        "parameters": ["A: Array - Set A.", "B: Array - Set B."],
        "return_value": ["Array - Intersection of A and B."]
    },
    "fn_vbs_setPitchBank": {
        "id": "1509748",
        "title": "fn_vbs_setPitchBank",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setPitchBank",
        "example": "",
        "syntax": "",
        "docSyntax": "[object, pitch, bank, apply] call fn_vbs_setPitchBank",
        "parameters": [
            "object: Object - Object to rotate.",
            "pitch: Number - Pitch degree.",
            "bank: Number - Bank degree.",
            "apply: Boolean - Whether the pitch/bank should be applied to the object, or whether to just return the calculated vectors (optional, default: true)  (V1.22+)."
        ],
        "return_value": [
            "Array - [vectorDir array Vector3D, vectorUp array Vector3D] (V1.22+, in older version, returns Nothing)."
        ]
    },
    "fn_vbs_setSystemItemActive": {
        "id": "1509749",
        "title": "fn_vbs_setSystemItemActive",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemActive",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, active, updateClients] call fn_vbs_setSystemItemActive",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The system item ID.",
            "active: Boolean - Is active.",
            "updateClients: Boolean - Update all the clients (optional, default: true)."
        ],
        "return_value": ["Boolean - Returns false, if the system does not exist, or the item is of the wrong type."]
    },
    "fn_vbs_setSystemItemCode": {
        "id": "1509778",
        "title": "fn_vbs_setSystemItemCode",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemCode",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, code, updateClients] call fn_vbs_setSystemItemCode",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The system item ID.",
            "code: Code - The assigned code.",
            "updateClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": [
            "Boolean - Returns false, if the item or the system does not exist, or the item is of the wrong type."
        ]
    },
    "fn_vbs_setSystemItemCodeParam": {
        "id": "1509779",
        "title": "fn_vbs_setSystemItemCodeParam",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemCodeParam",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemID, param, updateClients] call fn_vbs_setSystemItemCodeParam",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemID: Number - The system ID.",
            "param: Anything - The code parameter to assign to the item.",
            "updateClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": [
            "Boolean - Returns\u00a0false,\u00a0if the item or the system do not exist, or the item is of the wrong type."
        ]
    },
    "fn_vbs_setSystemItemEnabled": {
        "id": "1509776",
        "title": "fn_vbs_setSystemItemEnabled",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemEnabled",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, enable, updateClients] call fn_vbs_setSystemItemEnabled",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The system item ID.",
            "enable: Boolean - True is enable, false disable.",
            "updateClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": ["Boolean - Returns false, if the system or the item do not exist."]
    },
    "fn_vbs_setSystemItemName": {
        "id": "1509777",
        "title": "fn_vbs_setSystemItemName",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemName",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, systemName, updateClients] call fn_vbs_setSystemItemName",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The system item ID.",
            "systemName: String - The system item name.",
            "updateClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": ["Boolean - Returns false, if the system or the item do not exist."]
    },
    "fn_vbs_setSystemItemShortcut": {
        "id": "1509774",
        "title": "fn_vbs_setSystemItemShortcut",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemShortcut",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, bindAction, updateAllClients] call fn_vbs_setSystemItemShortcut",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The Systems-Menu item ID.",
            "bindAction: String - VBS Key Actions to bind.",
            "updateAllClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": [
            "Boolean - Returns\u00a0false,\u00a0if the item or the system do not exist, or the item is of wrong type."
        ]
    },
    "fn_vbs_setSystemItemShowCondition": {
        "id": "1509775",
        "title": "fn_vbs_setSystemItemShowCondition",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemShowCondition",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, condition, updateClients] call fn_vbs_setSystemItemShowCondition",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The system item ID.",
            "condition: Code - The condition code.",
            "updateClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": ["Boolean - Returns false, if the item or the system do not exist."]
    },
    "fn_vbs_setSystemItemTooltip": {
        "id": "1509772",
        "title": "fn_vbs_setSystemItemTooltip",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setSystemItemTooltip",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID, tooltip, updateClients] call fn_vbs_setSystemItemTooltip",
        "parameters": [
            "vehicle: Object - The vehicle.",
            "systemItemID: Number - The system item ID.",
            "tooltip: String - The tooltip text.",
            "updateClients: Boolean - Update all clients (optional, default: true)."
        ],
        "return_value": ["Boolean - Returns false, if the system or the item do not exist."]
    },
    "fn_vbs_setUnion": {
        "id": "1509773",
        "title": "fn_vbs_setUnion",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setUnion",
        "example": "",
        "syntax": "",
        "docSyntax": "[A, B] call fn_vbs_setUnion",
        "parameters": ["A: Array - Set A", "B: Array - Set B"],
        "return_value": ["Array - Union of A and B"]
    },
    "fn_vbs_setUnitNBCLevel": {
        "id": "1509770",
        "title": "fn_vbs_setUnitNBCLevel",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_setUnitNBCLevel",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, level, animate] call fn_vbs_setUnitNBCLevel",
        "parameters": [
            "unit: Object - Unit to apply MOPP level to.",
            "level: String - Name of MOPP level to apply.",
            "animate: Boolean - If true, the uniform-change animation is played. If false, the change happens instantaneously (without animation) (optional, default: false)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_SetupCargoAreaForVehicle": {
        "id": "11567267",
        "title": "fn_vbs_SetupCargoAreaForVehicle",
        "version": "18.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_SetupCargoAreaForVehicle",
        "example": "",
        "syntax": "",
        "docSyntax": "[cv, cargoSpace, cargoProperties] call fn_vbs_unloadVehicleFromVehicleHold",
        "parameters": [
            "cv: Object - Cargo vehicle to have the new cargo space.",
            "cargoSpace: String - Cargo-space name.",
            "cargoProperties: Array - Cargo-space properties. The values are: [spacePosition, alignmentMethod, objectSpacing, unloadingArea]spacePosition: Array of Number - [[frontmost, leftmost, lowermost], [rearmost, rightmost, uppermost]], the positions in model space describing the frontmost, leftmost, and lowermost corner of the cargo-space cuboid, followed by the rearmost, rightmost, and uppermost corner of the cargo-space cuboid.alignmentMethod: Array of String - Cargo alignment method, currently must always be [\"front\", \"center\"].objectSpacing: Array of Number - \u00a0[left_right, forward_back, up_down], the amount of space (in meters) between cargo objects, when loaded (left-right, forward-back, and up-down).unloadingArea: Array of Position - Data Type and Number - [unload_position, load_unload_radius], the position of the unloading area, where any unloaded vehicle is placed. The load_unload_radius is optional, and describes the radius of the user actions (load cargo / unload cargo). Without the optional parameter, no user actions are available.",
            "spacePosition: Array of Number - [[frontmost, leftmost, lowermost], [rearmost, rightmost, uppermost]], the positions in model space describing the frontmost, leftmost, and lowermost corner of the cargo-space cuboid, followed by the rearmost, rightmost, and uppermost corner of the cargo-space cuboid.",
            "alignmentMethod: Array of String - Cargo alignment method, currently must always be [\"front\", \"center\"].",
            "objectSpacing: Array of Number - \u00a0[left_right, forward_back, up_down], the amount of space (in meters) between cargo objects, when loaded (left-right, forward-back, and up-down).",
            "unloadingArea: Array of Position - Data Type and Number - [unload_position, load_unload_radius], the position of the unloading area, where any unloaded vehicle is placed. The load_unload_radius is optional, and describes the radius of the user actions (load cargo / unload cargo). Without the optional parameter, no user actions are available."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_sgn": {
        "id": "1509771",
        "title": "fn_vbs_sgn",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sgn",
        "example": "",
        "syntax": "",
        "docSyntax": "number call fn_vbs_sgn",
        "parameters": ["number: Number - The number"],
        "return_value": ["1: if number > 0", "0: if number = 0", "-1: if number < 0"]
    },
    "fn_vbs_showMouseCursor": {
        "id": "1509768",
        "title": "fn_vbs_showMouseCursor",
        "version": "2.08",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_showMouseCursor",
        "example": "",
        "syntax": "",
        "docSyntax": "[[eventN,codeN,...], [key, toggle], cursor] call fn_vbs_showMouseCursor",
        "parameters": [
            "eventN: String - One or more Reference List, each followed by the associated code.",
            "codeN: String - Code that should be executed for this event.",
            "key: Number - DIK code of key that activates the cursor.",
            "toggle: Boolean - If true, the cursor is shown until key is pressed again. If false, then the cursor is only shown while key is held.",
            "cursor: String - Type of cursor to show while active (see setCursorType for possible types) (optional, default: Arrow)."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_sideFromIndex": {
        "id": "1509769",
        "title": "fn_vbs_sideFromIndex",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sideFromIndex",
        "example": "",
        "syntax": "",
        "docSyntax": "[sideIndex] call fn_vbs_sideFromIndex",
        "parameters": ["sideIndex: Number - Side index."],
        "return_value": ["Side-2"]
    },
    "fn_vbs_sideFromString": {
        "id": "1509766",
        "title": "fn_vbs_sideFromString",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sideFromString",
        "example": "",
        "syntax": "",
        "docSyntax": "[sideString] call fn_vbs_sideFromString",
        "parameters": ["sideString: String - String with side name (see description). Not case-sensitive."],
        "return_value": [
            "\"WEST\": west",
            "\"EAST\": east",
            "\"GUER\", \"INDEPENDENT\" or \"RESISTANCE\": resistance",
            "\"CIV\" or \"CIVILIAN\": civilian",
            "\"ENEMY\": sideEnemy",
            "\"FRIENDLY\": sideFriendly",
            "\"LOGIC\": sideLogic",
            "\"other\": sideUnknown"
        ]
    },
    "fn_vbs_sideToIndex": {
        "id": "1509767",
        "title": "fn_vbs_sideToIndex",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sideToIndex",
        "example": "",
        "syntax": "",
        "docSyntax": "[side] call fn_vbs_sideToIndex",
        "parameters": ["side: Side-2"],
        "return_value": ["Number - Side index."]
    },
    "fn_vbs_snow": {
        "id": "1509764",
        "title": "fn_vbs_snow",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_snow",
        "example": "",
        "syntax": "",
        "docSyntax": "[Intensity] call fn_vbs_snow",
        "parameters": [
            "[Intensity]: Number - Value from 0 to 1. Dictates the intensity of the snow fall, a value of 0 will terminate the effect."
        ],
        "return_value": [""]
    },
    "fn_vbs_sortArray": {
        "id": "1509765",
        "title": "fn_vbs_sortArray",
        "version": "1.21",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sortArray",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, code] call fn_vbs_sortArray",
        "parameters": ["array: Array - Array to sort.", "code: Code - Code that returns a Number."],
        "return_value": ["Array - Sorted array.Note: The input array is also modified by reference."]
    },
    "fn_vbs_sortStrings": {
        "id": "1509794",
        "title": "fn_vbs_sortStrings",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sortStrings",
        "example": "",
        "syntax": "",
        "docSyntax": "stringArray call fn_vbs_sortStrings",
        "parameters": ["stringArray: Array - Array to sort."],
        "return_value": ["Array"]
    },
    "fn_vbs_spawnFormation": {
        "id": "1511397",
        "title": "fn_vbs_spawnFormation",
        "version": "1.65",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_spawnFormation",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicles, position, dir, formation, showText, freezeSim] call fn_vbs_spawnFormation",
        "parameters": [
            "vehicles: Array - Vehicles / units to arrange in formation.",
            "position: Position-2 - Position of first formation member (leader).",
            "dir: Number - Azimuth of formation.",
            "formation: String - Name of formation (see setFormation).",
            "showText: Boolean - If true, the function displays a text with the formation position number above each vehicle (optional, default false).",
            "freezeSim: Boolean - If true, the vehicles have their setSimulationMode set to 1 (frozen) after they are arranged (optional, default false)."
        ],
        "return_value": ["vehicles: Array - The arranged vehicles."]
    },
    "fn_vbs_speak": {
        "id": "1509795",
        "title": "fn_vbs_speak",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_speak",
        "example": "",
        "syntax": "",
        "docSyntax": "[speaker, text, range, dimensions, emote] call fn_vbs_speak",
        "parameters": [
            "speaker: Object - Unit to speak / emote.",
            "text: String - Text of speech / emote",
            "range: Number - Player must be this close to hear the speech or see the emote. Note: Optics magnification is taken into account for emotes, allowing them to be seen from further away.",
            "dimensions: Array - Array defining the size of the displayed bubble:format: [lines, width_mult, font_mult]lines: Number - Bubble that hold this many lines of text vertically.width_mult: Number - Default bubble width is multiplied by this.font_mult: Number - Default font size is multiplied by this (optional - if ommitted, or if an empty array is passed, defaults are used: [4, 1, 1])",
            "lines: Number - Bubble that hold this many lines of text vertically.",
            "width_mult: Number - Default bubble width is multiplied by this.",
            "font_mult: Number - Default font size is multiplied by this (optional - if ommitted, or if an empty array is passed, defaults are used: [4, 1, 1])",
            "emote: String - If true, this is an emote, not speech (optional, default: false)."
        ],
        "return_value": ["Boolean - Indicates whether the speech / emote was heard / seen."]
    },
    "fn_vbs_splitString": {
        "id": "1509792",
        "title": "fn_vbs_splitString",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_splitString",
        "example": "",
        "syntax": "",
        "docSyntax": "[string, delimiter] call fn_vbs_splitString",
        "parameters": [
            "string: String - Base string to split.",
            "delimiter: String - Delimiter string (optional, default: comma)."
        ],
        "return_value": ["Array - Array of strings."]
    },
    "fn_vbs_stowBarrel": {
        "id": "1509793",
        "title": "fn_vbs_stowBarrel",
        "version": "1.46",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_stowBarrel",
        "example": "",
        "syntax": "",
        "docSyntax": "[flag, tank] call fn_vbs_stowBarrel",
        "parameters": [
            "flag: Number - Can be:0 (Unstow Tank)1 (Stow Tank)2 (Stow Tank Instantly)4 (Is tank currently stowed?)",
            "0 (Unstow Tank)",
            "1 (Stow Tank)",
            "2 (Stow Tank Instantly)",
            "4 (Is tank currently stowed?)",
            "tank: Object - The tank that to stowed"
        ],
        "return_value": ["Boolean - Can the requested action be completed? If true, the action is already being done."]
    },
    "fn_vbs_StrIndex": {
        "id": "1509790",
        "title": "fn_vbs_StrIndex",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_StrIndex",
        "example": "",
        "syntax": "",
        "docSyntax": "[baseStr, findStr, case, start] call fn_vbs_StrIndex",
        "parameters": [
            "baseStr: String - String that is being searched.",
            "findStr: String - String being searched for.",
            "case (V1.34+): Boolean - Should the search be case-sensitive (optional, default: false).",
            "start (V1.34+): Number - Character index to start the find/replace operation from (optional, default: 0 - represents the first character)."
        ],
        "return_value": ["Number - Position found (0-based), -1 if not found."]
    },
    "fn_vbs_StrInStr": {
        "id": "1509791",
        "title": "fn_vbs_StrInStr",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_StrInStr",
        "example": "",
        "syntax": "",
        "docSyntax": "[search_in, search_for] call fn_vbs_StrInStr",
        "parameters": [
            "search_in: String - String that is being searched.",
            "search_for: String - String being searched for."
        ],
        "return_value": ["Boolean"]
    },
    "fn_vbs_stripExtension": {
        "id": "1509788",
        "title": "fn_vbs_stripExtension",
        "version": "3.9.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_stripExtension",
        "example": "",
        "syntax": "",
        "docSyntax": "[filePath] call fn_vbs_stripExtension",
        "parameters": ["filePath: String - File path to strip the extension from."],
        "return_value": ["Array - [path without extension, extension]"]
    },
    "fn_vbs_StrLeft": {
        "id": "1509789",
        "title": "fn_vbs_StrLeft",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_StrLeft",
        "example": "",
        "syntax": "",
        "docSyntax": "[string ,length] call fn_vbs_StrLeft",
        "parameters": [
            "string: String - String to extract characters from.",
            "length: Number - Number of characters to extract."
        ],
        "return_value": ["String"]
    },
    "fn_vbs_StrMid": {
        "id": "1509786",
        "title": "fn_vbs_StrMid",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_StrMid",
        "example": "",
        "syntax": "",
        "docSyntax": "[string, start, length] call fn_vbs_StrMid",
        "parameters": [
            "string: String - String to extract characters from.",
            "start: Number - String position to start extracting from (0-based).",
            "length: Number - Number of characters to extract (optional, default: all remaining characters)."
        ],
        "return_value": ["String"]
    },
    "fn_vbs_StrRight": {
        "id": "1509787",
        "title": "fn_vbs_StrRight",
        "version": "1.24",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_StrRight",
        "example": "",
        "syntax": "",
        "docSyntax": "[string,length] call fn_vbs_StrRight",
        "parameters": [
            "string: String - String to extract characters from.",
            "length: Number - Number of characters to extract."
        ],
        "return_value": ["String"]
    },
    "fn_vbs_subSelect": {
        "id": "1509784",
        "title": "fn_vbs_subSelect",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_subSelect",
        "example": "",
        "syntax": "",
        "docSyntax": "[array, beg, end] call fn_vbs_subSelect",
        "parameters": [
            "array: Array - Array to select the sub-array from.",
            "beg: Number - Array index to begin the sub-array. If negative, index is counted from the end of the array.",
            "end: Number - Index of array to end the sub-array. If negative, it specifies the length of the sub-array (in absolute form) (optional, default: if omitted, remainder of the array will be selected)."
        ],
        "return_value": ["Array"]
    },
    "fn_vbs_swapVars": {
        "id": "1509785",
        "title": "fn_vbs_swapVars",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_swapVars",
        "example": "",
        "syntax": "",
        "docSyntax": "[var1, var2] call fn_vbs_swapVars",
        "parameters": [
            "var1: String - Variable name of the first variable, in quotes.",
            "var2: String - Variable name of the second variable, in quotes."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_systemItemExists": {
        "id": "1509782",
        "title": "fn_vbs_systemItemExists",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_systemItemExists",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, systemItemID] call fn_vbs_systemItemExists",
        "parameters": ["vehicle: Object - The vehicle.", "systemItemID: Number - The system item ID."],
        "return_value": ["Boolean - Returns true, if the system item exists."]
    },
    "fn_vbs_sysText": {
        "id": "1509783",
        "title": "fn_vbs_sysText",
        "version": "2.06",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_sysText",
        "example": "",
        "syntax": "",
        "docSyntax": "[text,duration,index,insert] call fn_vbs_sysText",
        "parameters": [
            "text: String - Text to display.",
            "duration: Number - Number of seconds the text should be shown.",
            "id: Number - Index number of existing text, which should be replaced (optional, default: if no index is given, the new line is inserted at the top).",
            "insert: Boolean - Whether an updated message (using an existing index) should be inserted at the top. If true, then the new message gets added to the top, and the old one gets removed. If false, then the new message gets displayed at the position of the message it replaces (optional, default: true)."
        ],
        "return_value": [
            "Number - Index number of created text, which can be used in another call to replace the existing message."
        ]
    },
    "fn_vbs_timeDifference": {
        "id": "1509780",
        "title": "fn_vbs_timeDifference",
        "version": "1.34",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_timeDifference",
        "example": "",
        "syntax": "",
        "docSyntax": "[old_date, new_date, units] call fn_vbs_timeDifference",
        "parameters": [
            "old_date: Array - Old date / time. The format is: [year, month, day, hour, minute, second, millisecond]. Elements left blank are set to 0.",
            "new_date: Array - New date / time. The format is the same as that of old_date.",
            "units: Number - Unit type to return time in:0 - years1 - months2 - days3 - hours4 - minutes (default)5 - seconds6 - milliseconds",
            "0 - years",
            "1 - months",
            "2 - days",
            "3 - hours",
            "4 - minutes (default)",
            "5 - seconds",
            "6 - milliseconds"
        ],
        "return_value": [
            "Number - Time difference between the two date / time arrays. Units are specified by the units parameter."
        ]
    },
    "fn_vbs_timeToString": {
        "id": "1509781",
        "title": "fn_vbs_timeToString",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_timeToString",
        "example": "",
        "syntax": "",
        "docSyntax": "[currtime, format] call fn_vbs_timeToString",
        "parameters": [
            "currtime: Number - Either the system variable daytime, or a user-defined one, in the same format as daytime.",
            "format: String - Defines the returned time format (optional).",
            "\"HH\" - Hour",
            "\"HH:MM\" - Hour:Minute",
            "\"HH:MM:SS\" - Hour:Minute:Seconds (default)",
            "\"HH:MM:SS:MM\" - Hour:Minute:Seconds:Milliseconds",
            "\"ARRAY\" - [Hour, Minute, Seconds, Milliseconds]"
        ],
        "return_value": [""]
    },
    "fn_vbs_towing": {
        "id": "1509810",
        "title": "fn_vbs_towing",
        "version": "1.46",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_towing",
        "example": "",
        "syntax": "",
        "docSyntax": "[mode, towing_vehicle, towed_vehicle, more] call fn_vbs_towing",
        "parameters": [
            "mode: Number - see above",
            "towing_vehicle: Object",
            "more (optional): String or Array - The rack"
        ],
        "return_value": [" Boolean or Object "]
    },
    "fn_vbs_trimString": {
        "id": "1509811",
        "title": "fn_vbs_trimString",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_trimString",
        "example": "",
        "syntax": "",
        "docSyntax": "[string] call fn_vbs_trimString",
        "parameters": ["string: String - String to trimm."],
        "return_value": ["String"]
    },
    "fn_vbs_underlyingSurface": {
        "id": "1509808",
        "title": "fn_vbs_underlyingSurface",
        "version": "1.54",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_underlyingSurface",
        "example": "",
        "syntax": "",
        "docSyntax": "[from, ignoreObjects, ignoreTypes, minSize] call fn_vbs_underlyingSurface",
        "parameters": [
            "from: PositionASL or Object - Object or position to find the surface beneath.",
            "ignoreObjects: Array of Object - List of objects to ignore as surfaces (if from is an object, it is also ignored) (optional).",
            "ignoreTypes: Array of String - List of object types (class names) to ignore as surfaces (optional).",
            "minSize: Number - Minimum surface size, smaller objects may be ignored (optional)."
        ],
        "return_value": [
            "Array - First element is the position on the surface (PositionASL), the second is the surface normal at that position (Vector3D)."
        ]
    },
    "fn_vbs_unitCanEject": {
        "id": "1509809",
        "title": "fn_vbs_unitCanEject",
        "version": "3.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_unitCanEject",
        "example": "",
        "syntax": "",
        "docSyntax": "unit call fn_vbs_unitCanEject",
        "parameters": ["unit: Object - Unit to check."],
        "return_value": [
            "Boolean - If true, then the unit can eject from the vehicle, if false, then ejection is impossible (or the unit is not in a vehicle)."
        ]
    },
    "fn_vbs_unitIsSwimming": {
        "id": "1509806",
        "title": "fn_vbs_unitIsSwimming",
        "version": "1.70, 2.12",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_unitIsSwimming",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_unitIsSwimming",
        "parameters": ["unit: Object - Checked unit,"],
        "return_value": ["Boolean"]
    },
    "fn_vbs_unitObserve": {
        "id": "1509807",
        "title": "fn_vbs_unitObserve",
        "version": "1.40",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_unitObserve",
        "example": "",
        "syntax": "",
        "docSyntax": "[observer, target, device, stance, condition] call fn_vbs_unitObserve",
        "parameters": [
            "observer: Object - Unit that will observe the target",
            "target: Object - Unit/object to be observed",
            "device: String - Type of device to use. Can be \"binocular\", \"vbs2_handicam\", \"vbs2_canon_xl1\".",
            "stance: String - Stance to assume. Can be \"STAND\", \"KNEEL\" or \"PRONE\". (optional, default: \"STAND\")",
            "condition: Code - Condition must return true to stop observation. (optional, default: observer taking damage.)"
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_unitShowBandage": {
        "id": "1509804",
        "title": "fn_vbs_unitShowBandage",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_unitShowBandage",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit, treatment, show, apply] call fn_vbs_unitShowBandage",
        "parameters": [
            "unit: Object - Soldier that is affected.",
            "treatment: String - Bandage type and body part that should be treated (see description).",
            "show: Boolean - If true, then the bandage is shown; if false, it is removed.",
            "apply: Boolean - If true, then changes are applied; if false, then nothing is visibly applied, and the function only returns the selection information (optional, default: true)."
        ],
        "return_value": [
            "If show is true, it is: [selection index, texture path].If show is false, it is: [selection index, \"\"].If show is true or false, and the bandage is already in the desired state, it is: [].If invalid parameters are passed, or the unit does support bandages, it is nil.",
            "If show is true, it is: [selection index, texture path].",
            "If show is false, it is: [selection index, \"\"].",
            "If show is true or false, and the bandage is already in the desired state, it is: [].",
            "If invalid parameters are passed, or the unit does support bandages, it is nil."
        ]
    },
    "fn_vbs_unitVector": {
        "id": "1509805",
        "title": "fn_vbs_unitVector",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_unitVector",
        "example": "",
        "syntax": "",
        "docSyntax": "vector call fn_vbs_unitVector",
        "parameters": ["vector: Array of Number - The vector."],
        "return_value": ["vector: Array of Number - Unit vector of input vector."]
    },
    "fn_vbs_unloadVehicleFromVehicleHold": {
        "id": "11567259",
        "title": "fn_vbs_unloadVehicleFromVehicleHold",
        "version": "18.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_unloadVehicleFromVehicleHold",
        "example": "",
        "syntax": "",
        "docSyntax": "[cv, cargoSpace] call fn_vbs_unloadVehicleFromVehicleHold",
        "parameters": [
            "cv: Object - Cargo vehicle to unload from.",
            "cargoSpace: String - Configured name of the cargo space. For all currently configured cargo vehicles, the cargo space name \"CargoCompartment_01\" is always used."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_validateCode": {
        "id": "1509802",
        "title": "fn_vbs_validateCode",
        "version": "3.3",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_validateCode",
        "example": "",
        "syntax": "",
        "docSyntax": "[code, allowEmpty, returnType] call fn_vbs_validateCode",
        "parameters": [
            "code: String - Code to validate.",
            "allowEmpty: Boolean - If true, then an empty code string is considered valid. If false, then code cannot be empty.",
            "returnType: String - typeName that should match the type returned by the defined code. If empty (\"\"), then no check is done (optional, default: \"\" )."
        ],
        "return_value": [
            "0: Valid code, and (if checked) code returns the specified type.",
            "1: String is empty, without it being allowed.",
            "6: Invalid code.",
            "7: Code returns the wrong data type."
        ]
    },
    "fn_vbs_validateCoords": {
        "id": "1509803",
        "title": "fn_vbs_validateCoords",
        "version": "3.7",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_validateCoords",
        "example": "",
        "syntax": "",
        "docSyntax": "[coord, allowEmpty, format] call fn_vbs_validateCoords",
        "parameters": [
            "coord: String - Coordinate component to validate.",
            "allowEmpty: Boolean - If true, then an empty coord string will be considered valid. If false, then 'coord' cannot be empty.",
            "format: String - The type of coordinate component that should be allowed in 'coord'. Can be: \"LL_DEG_LAT\" or \"LL_DEG_LONG - Input must be a number with no more than 10 digits (incl. decimal point), between 0 and 9999999999. \"LLMS_MIN_LAT\" or \"LLMS_MIN_LONG\" - Input must be a number with no more than 9 digits (incl. decimal point), between 0 and 99.999999. \"LLMS_SEC_LAT\" or \"LLMS_SEC_LONG\" - Input must be a number with no more than 9 digits (incl. decimal point), between 0 and 99.999999. \"UTM_ZONE\" - Input must be a number with no more than 2 digits, between 0 and 99. \"UTM_EAST\" - Input must be a number with no more than 9 digits (incl. decimal point), between 0 and 999999.99. \"UTM_NORTH\" - Input must be a number with no more than 10 digits (incl. decimal point), between 0 and 9999999.99. \"VBS_X\" or \"VBS_Y\" - Input must be a number with no more than 15 digits (incl. decimal point), between 0 and 9999999.9999999. \"VBS_Z\" - Input must be a number with no more than 12 digits (incl. decimal point), between 0 and 9999.9999999. \"MGRS_GZD\" - Input must be a maximum of 3 characters, with the first two digits being 0-9, and the third one a character between C & X (excluding \"I\" or \"O\"). \"MGRS_SQID\" - Input must be a maximum of 2 characters, with the first between A-Z and second between A-V, neither of which may include \"I\" or \"O\". \"MGRS_EAST\" or \"MGRS_NORTH\" - Input must be a number with no more than 5 digits, between 0-99999.",
            "\"LL_DEG_LAT\" or \"LL_DEG_LONG - Input must be a number with no more than 10 digits (incl. decimal point), between 0 and 9999999999.",
            "\"LLMS_MIN_LAT\" or \"LLMS_MIN_LONG\" - Input must be a number with no more than 9 digits (incl. decimal point), between 0 and 99.999999.",
            "\"LLMS_SEC_LAT\" or \"LLMS_SEC_LONG\" - Input must be a number with no more than 9 digits (incl. decimal point), between 0 and 99.999999.",
            "\"UTM_ZONE\" - Input must be a number with no more than 2 digits, between 0 and 99.",
            "\"UTM_EAST\" - Input must be a number with no more than 9 digits (incl. decimal point), between 0 and 999999.99.",
            "\"UTM_NORTH\" - Input must be a number with no more than 10 digits (incl. decimal point), between 0 and 9999999.99.",
            "\"VBS_X\" or \"VBS_Y\" - Input must be a number with no more than 15 digits (incl. decimal point), between 0 and 9999999.9999999.",
            "\"VBS_Z\" - Input must be a number with no more than 12 digits (incl. decimal point), between 0 and 9999.9999999.",
            "\"MGRS_GZD\" - Input must be a maximum of 3 characters, with the first two digits being 0-9, and the third one a character between C & X (excluding \"I\" or \"O\").",
            "\"MGRS_SQID\" - Input must be a maximum of 2 characters, with the first between A-Z and second between A-V, neither of which may include \"I\" or \"O\".",
            "\"MGRS_EAST\" or \"MGRS_NORTH\" - Input must be a number with no more than 5 digits, between 0-99999."
        ],
        "return_value": [" Boolean - If true, then coordinate is either valid, or empty (if allowed)."]
    },
    "fn_vbs_validateGPSCoord": {
        "id": "1509800",
        "title": "fn_vbs_validateGPSCoord",
        "version": "3.4",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_validateGPSCoord",
        "example": "",
        "syntax": "",
        "docSyntax": "[coords, allowEmpty] call fn_vbs_validateGPSCoord",
        "parameters": [
            "coords: String - MGRS coordinate to be tested",
            "allowEmpty: Boolean - If true, then empty coordinates are allowed, and will return a positive result."
        ],
        "return_value": [
            "0: String is a valid coordinate,",
            "1: String was empty and it wasn't allowed,",
            "8: The format of the coordinate is incorrect"
        ]
    },
    "fn_vbs_validateNumber": {
        "id": "1509801",
        "title": "fn_vbs_validateNumber",
        "version": "3.3",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_validateNumber",
        "example": "",
        "syntax": "",
        "docSyntax": "[number, allowEmpty, allowDecimal, include, exclude] call fn_vbs_validateNumber",
        "parameters": [
            "number: String or Number - Number to validate.",
            "allowEmpty: Boolean - If true, then an empty number string is considered valid. If false, then number cannot be empty (optional, default: false).",
            "allowDecimal: Boolean - If true, then a decimal point is allowed in the passed number. If false, then only integers are permitted (optional, default: true).",
            "include: Array of Number or Array - List of numbers or ranges which are allowed. A range is specified using a sub-array: [min, max]. The range extremes are included in the allowed numbers, and the string \"inf\" can be used (in either place) to indicate an \"infinite\" limit (optional, default: [] - no restrictions).",
            "exclude: Array of Number or Array - List of numbers or ranges which are not allowed (same functionality and syntax as include)."
        ],
        "return_value": [
            "0: Number is valid.",
            "1: String was empty, without it being allowed.",
            "2: String does not contain valid number.",
            "3: Number is not within allowed range.",
            "4: Number is in forbidden range.",
            "5: Number contains decimal point, without it being allowed."
        ]
    },
    "fn_vbs_vectorAdd": {
        "id": "1509798",
        "title": "fn_vbs_vectorAdd",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorAdd",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1,vector2] call fn_vbs_vectorAdd",
        "parameters": ["vector1: Array of Number - First vector.", "vector2: Array of Number - Second vector."],
        "return_value": ["Array of Number - Sum of the two vectors."]
    },
    "fn_vbs_vectorAngle": {
        "id": "1509799",
        "title": "fn_vbs_vectorAngle",
        "version": "3.5",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorAngle",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1, vector2] call fn_vbs_vectorAngle",
        "parameters": ["vector1: Vector3D - First vector.", "vector2: Vector3D - Second vector."],
        "return_value": ["Number - Difference in degrees. Angle is always positive."]
    },
    "fn_vbs_vectorDiff": {
        "id": "1509796",
        "title": "fn_vbs_vectorDiff",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorDiff",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1,vector2] call fn_vbs_vectorDiff",
        "parameters": [
            "vector1: Array of Number - Vector to subtract.",
            "vector2: Array of Number - Vector to be subtracted from."
        ],
        "return_value": ["vector: Array of Number - Difference between vector1 and vector2"]
    },
    "fn_vbs_vectorDistance": {
        "id": "11567234",
        "title": "fn_vbs_vectorDistance",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorDistance",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1, vector2] call fn_vbs_vectorDistance",
        "parameters": ["vector1: Array - First vector.", "vector2: Array - Second vector."],
        "return_value": ["Number - Distance between two vectors."]
    },
    "fn_vbs_vectorDistanceSqr": {
        "id": "11567239",
        "title": "fn_vbs_vectorDistanceSqr",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorDistanceSqr",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector1, vector2] call fn_vbs_vectorDistanceSqr",
        "parameters": ["vector1: Array - First vector.", "vector2: Array - Second vector."],
        "return_value": ["Number - Squared distance between two vectors."]
    },
    "fn_vbs_vectorFromXToY": {
        "id": "1509797",
        "title": "fn_vbs_vectorFromXToY",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorFromXToY",
        "example": "",
        "syntax": "",
        "docSyntax": "[vectorX, vectorY] call fn_vbs_vectorFromXToY",
        "parameters": ["vectorX: Array of Number - Points from here.", "vectorY: Array of Number - Points to here."],
        "return_value": ["Array of Number"]
    },
    "fn_vbs_vectorMultiply": {
        "id": "1509826",
        "title": "fn_vbs_vectorMultiply",
        "version": "1.19",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorMultiply",
        "example": "",
        "syntax": "",
        "docSyntax": "[vector,scalar] call fn_vbs_vectorMultiply",
        "parameters": ["vector: Array of Number - The vector.", "scalar: Number - The scalar."],
        "return_value": ["Array of Number"]
    },
    "fn_vbs_vectorToDir": {
        "id": "1509827",
        "title": "fn_vbs_vectorToDir",
        "version": "1.31",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vectorToDir",
        "example": "",
        "syntax": "",
        "docSyntax": "vector call fn_vbs_vectorToDir",
        "parameters": ["vector: Vector3D - Vector direction."],
        "return_value": ["[azimuth, elevation] - Azimuth and elevation (in degrees)."]
    },
    "fn_vbs_vehicleECM": {
        "id": "1509824",
        "title": "fn_vbs_vehicleECM",
        "version": "1.46",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_vehicleECM",
        "example": "",
        "syntax": "",
        "docSyntax": "[vehicle, action, visible, action_seats, viewing_seats] call fn_vbs_vehicleECM",
        "parameters": [
            "vehicle: Object - Vehicle to attach the CREW device to.",
            "action: Number - Action(s) to execute. The available actions are listed in the description section.",
            "visible: Boolean - Indicates whether the device shows the jamming radius of the vehicle, when it is on and not damaged.",
            "action_seats: Array of Number - Indexes of vehicle seats that have the CREW actions available to them. These seats are automatically treated as if they were in the viewing_seats array too.",
            "viewing_seats: Array of Number - Indexes of vehicle seats that are able to see the onscreen display, showing the state of the CREW device."
        ],
        "return_value": ["Array - Passed parameters and device state."]
    },
    "fn_vbs_visual_arrowH": {
        "id": "1509825",
        "title": "fn_vbs_visual_arrowH",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_visual_arrowH",
        "example": "",
        "syntax": "",
        "docSyntax": "[position, direction, color, end] call fn_vbs_visual_arrowH",
        "parameters": [
            "position: Position3D - Position for arrow to hover over.",
            "direction: Number - Compass direction to point at.",
            "color: Color - RGBA color of the arrow.",
            "end: Number or Code - If a number, the arrow exists for that many seconds. If code, the arrow disappears once the code condition is met."
        ],
        "return_value": ["Object - Arrow created (only in V3.7+; in previous versions, nothing is returned)."]
    },
    "fn_vbs_visual_arrowV": {
        "id": "1509822",
        "title": "fn_vbs_visual_arrowV",
        "version": "1.30",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_visual_arrowV",
        "example": "",
        "syntax": "",
        "docSyntax": "[target, color, end] call fn_vbs_visual_arrowV",
        "parameters": [
            "target: Object - Object for the arrow to hover over. Use Game Logic to mark a position.",
            "color: Color - RGBA arrow color.",
            "end: Number or Code - If a number, the arrow exists for that many seconds. If code, the arrow disappears once the code condition is met. Code has access to the _obj variable, which contains the object the arrow is pointing at."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_watchValues": {
        "id": "1509823",
        "title": "fn_vbs_watchValues",
        "version": "1.62",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_watchValues",
        "example": "",
        "syntax": "",
        "docSyntax": "[parameters, leading_text, trailing_text, interval, condition] call fn_vbs_watchValues;",
        "parameters": [
            "parameters: Nested Array, containing one or more of: [Code as String, Label as String]",
            "leading_text: String - Leading text.",
            "trailing_text: String - Trailing text.",
            "interval: Number - Hint message refresh interval.",
            "condition: Code as String - Hint is displayed only while this condition is evaluated to true; the hint never appears, if this condition is false when the function is called."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbs_weapon_on_back": {
        "id": "1509820",
        "title": "fn_vbs_weapon_on_back",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_weapon_on_back",
        "example": "",
        "syntax": "",
        "docSyntax": "[unit] call fn_vbs_weapon_on_back",
        "parameters": ["unit: Object - Player or AI."],
        "return_value": ["Nothing"]
    },
    "fn_vbs_weapon_on_back_condition": {
        "id": "1509821",
        "title": "fn_vbs_weapon_on_back_condition",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_weapon_on_back_condition",
        "example": "",
        "syntax": "",
        "docSyntax": "unit call fn_vbs_weapon_on_back_condition",
        "parameters": ["unit: Object - Player or AI."],
        "return_value": [
            "Boolean - If true, then unit has a weapon that can be shouldered/holstered. If false, then either the unit doesn't have such a weapon in the first place, or it shouldered/holstered already."
        ]
    },
    "fn_vbs_wrapAngle": {
        "id": "1509818",
        "title": "fn_vbs_wrapAngle",
        "version": "1.20",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbs_wrapAngle",
        "example": "",
        "syntax": "",
        "docSyntax": "[angle] call fn_vbs_wrapAngle",
        "parameters": ["angle: Number - The angle."],
        "return_value": ["Number"]
    },
    "fn_vbsCon_civ_setTrafficDebug": {
        "id": "6160404",
        "title": "fn_vbsCon_civ_setTrafficDebug",
        "version": "18.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbsCon_civ_setTrafficDebug",
        "example": "",
        "syntax": "",
        "docSyntax": "options call fn_vbsCon_civ_setTrafficDebug",
        "parameters": [
            "options: Array of String - Contains the visualization options to enable. To enable all the options, use\u00a0\"all\"; or\u00a0\"none\", to disable all of them."
        ],
        "return_value": ["Nothing"]
    },
    "fn_vbsCon_pauseConvoy": {
        "id": "6160417",
        "title": "fn_vbsCon_pauseConvoy",
        "version": "18.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbsCon_pauseConvoy",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbsCon_pauseConvoy",
        "parameters": ["vehicle: Object - Lead convoy vehicle."],
        "return_value": ["Nothing"]
    },
    "fn_vbsCon_resumeConvoy": {
        "id": "6160419",
        "title": "fn_vbsCon_resumeConvoy",
        "version": "18.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/fn_vbsCon_resumeConvoy",
        "example": "",
        "syntax": "",
        "docSyntax": "vehicle call fn_vbsCon_resumeConvoy",
        "parameters": ["vehicle: Object - Lead convoy vehicle."],
        "return_value": ["Nothing"]
    },
    "Gateway_ApplySettings": {
        "id": "1509819",
        "title": "Gateway_ApplySettings",
        "version": "3.8.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ApplySettings",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call Gateway_ChangeSetting",
        "parameters": [""],
        "return_value": ["Nothing"]
    },
    "Gateway_CenterMotionDevice": {
        "id": "1509816",
        "title": "Gateway_CenterMotionDevice",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_CenterMotionDevice",
        "example": "",
        "syntax": "",
        "docSyntax": "[enabled, deviceID] call Gateway_CenterMotionDevice",
        "parameters": [
            "enabled: Boolean - Set to true to enable boresight centering of the motion device, set to false to disable it.",
            "deviceID: Number - ID of the device this command applies to (optional, default: 1)."
        ],
        "return_value": ["Boolean - Returns true if the command is successful, false otherwise."]
    },
    "Gateway_ChangeSetting": {
        "id": "1509817",
        "title": "Gateway_ChangeSetting",
        "version": "3.8.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ChangeSetting",
        "example": "",
        "syntax": "",
        "docSyntax": "[fom_name, setting_name, setting_value] call Gateway_ChangeSetting",
        "parameters": [
            "fom_name: String - The FOM name.",
            "setting_name: String - The setting name.",
            "setting_value: String - The setting value."
        ],
        "return_value": [
            "String or Array - The given value is returned if the FOM and setting exist, otherwise returns an empty array."
        ]
    },
    "Gateway_Enabled": {
        "id": "1509814",
        "title": "Gateway_Enabled",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_Enabled",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call Gateway_Enabled",
        "parameters": [""],
        "return_value": [
            "Array - And array containing a single Boolean value - true when the Gateway GUI is enabled in the settings file, false otherwise."
        ]
    },
    "Gateway_EnableMotionTracking": {
        "id": "1509815",
        "title": "Gateway_EnableMotionTracking",
        "version": "3.9.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_EnableMotionTracking",
        "example": "",
        "syntax": "",
        "docSyntax": "[isEnabled, ctlViews, isViewGrp, deviceID] call Gateway_EnableMotionTracking",
        "parameters": [
            "isEnabled: Boolean - Set to true if motion tracking should be enabled for the list of IGs, set to false if it should be disabled.",
            "ctlViews: Array - List of IG view or group IDs that are controlled by the motion device.",
            "isViewGrp: Boolean - Set to true if the controlled view list is groups, false if individual views (optional, default: false).",
            "deviceID: Number - ID of the device this command applies to (optional, default: 1)."
        ],
        "return_value": ["Boolean - Returns true if the command is successful, false otherwise."]
    },
    "Gateway_GetExternalProperty": {
        "id": "1509812",
        "title": "Gateway_GetExternalProperty",
        "version": "17.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_GetExternalProperty",
        "example": "",
        "syntax": "",
        "docSyntax": "[extSim, id, property] call Gateway_GetExternalProperty",
        "parameters": [
            "extSim: String - Name of the external simulation type.",
            "id: Array of Number - Object ID of the entity that is registered as an external simulation.",
            "property: String - Property name to get."
        ],
        "return_value": ["Number - Value of the property."]
    },
    "Gateway_GetGUIPort": {
        "id": "1509813",
        "title": "Gateway_GetGUIPort",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_GetGUIPort",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call Gateway_GetGUIPort",
        "parameters": [""],
        "return_value": ["portNumber: Number - The port number the Gateway GUI is currently using."]
    },
    "Gateway_GetSetting": {
        "id": "1509842",
        "title": "Gateway_GetSetting",
        "version": "3.8.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_GetSetting",
        "example": "",
        "syntax": "",
        "docSyntax": "[fom_name, setting_name] call Gateway_GetSetting",
        "parameters": ["fom_name: String - The FOM name.", "setting_name: String - The setting name."],
        "return_value": ["String - The setting value."]
    },
    "Gateway_SendCommand": {
        "id": "1509843",
        "title": "Gateway_SendCommand",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_SendCommand",
        "example": "",
        "syntax": "",
        "docSyntax": "[command, datumID] call Gateway_SendCommand",
        "parameters": [
            "command: String - The command to send.",
            "datum: Number - The datum ID which can be different than the one specified in the Gateway Settings. When no datum ID is given, the receiving datum ID from the Gateway Settings is used (optional). (V3.9.0)"
        ],
        "return_value": ["Nothing"]
    },
    "Gateway_SendString": {
        "id": "1509840",
        "title": "Gateway_SendString",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_SendString",
        "example": "",
        "syntax": "",
        "docSyntax": "[message] call Gateway_SendString",
        "parameters": ["message: String - The message to send."],
        "return_value": ["Nothing"]
    },
    "Gateway_SetExternalProperty": {
        "id": "1509841",
        "title": "Gateway_SetExternalProperty",
        "version": "17.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_SetExternalProperty",
        "example": "",
        "syntax": "",
        "docSyntax": "[extSim, id, property, value] call Gateway_SetExternalProperty",
        "parameters": [
            "extSim: String - Name of the external simulation type.",
            "id: Array of Number - Object ID of the entity that is registered as an external simulation.",
            "property: String - Property name to set.",
            "value: Number - Property value."
        ],
        "return_value": ["Nothing"]
    },
    "Gateway_ShowGUI": {
        "id": "1509838",
        "title": "Gateway_ShowGUI",
        "version": "3.6",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ShowGUI",
        "example": "",
        "syntax": "",
        "docSyntax": "[showInVBS] call Gateway_ShowGUI",
        "parameters": [
            "showInVBS: Boolean - Set to true to show the Gateway GUI in VBS, or to false to show the Gateway GUI in a web browser."
        ],
        "return_value": ["Nothing"]
    },
    "Gateway_ShowRemoteGUI": {
        "id": "1509839",
        "title": "Gateway_ShowRemoteGUI",
        "version": "3.9.2",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ShowRemoteGUI",
        "example": "",
        "syntax": "",
        "docSyntax": "[ip, serverPort, showGUI] call Gateway_ShowRemoteGUI",
        "parameters": [
            "ip: String - The IP Address of the server for the GUI.",
            "serverPort: Number - The port of the GUI server.",
            "showGUI: Boolean - Set to true to show the Gateway GUI in VBS, to false to show the Gateway GUI in a web browser."
        ],
        "return_value": ["Nothing"]
    },
    "Gateway_ViewAttachGroup": {
        "id": "1509836",
        "title": "Gateway_ViewAttachGroup",
        "version": "3.8.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewAttachGroup",
        "example": "",
        "syntax": "",
        "docSyntax": "[entityID, filename] call Gateway_ViewAttachGroup",
        "parameters": [
            "entityID: Array - The Net ID of the entity (an Array of Number as provided by ObjToId)Note: As of 17.3, Gateway does not support the String Net ID format.",
            "filename: String - The name of the configuration file."
        ],
        "return_value": [
            "Boolean - true indicates success, false failure.",
            "Number or String - If successful, the number of views loaded; if not successful, an error message."
        ]
    },
    "Gateway_ViewClearGroup": {
        "id": "1509837",
        "title": "Gateway_ViewClearGroup",
        "version": "3.8.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewClearGroup",
        "example": "",
        "syntax": "",
        "docSyntax": "[entityID] call Gateway_ViewClearGroup",
        "parameters": ["entityID\u00a0: Number - The ID of the entity whose views are removed."],
        "return_value": [
            "Boolean - true if the entity views were successfully removed, false otherwise.",
            "String - An error message, if the entity views were not successfully removed."
        ]
    },
    "Gateway_ViewGet": {
        "id": "1509834",
        "title": "Gateway_ViewGet",
        "version": "3.8.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewGet",
        "example": "",
        "syntax": "",
        "docSyntax": "[viewID] call Gateway_ViewGet",
        "parameters": ["viewID: Number - The ID of the view. Unique identifier between 0 -> 65535."],
        "return_value": ["Array - The View Configuration (see description)."]
    },
    "Gateway_ViewGetBrightnessContrast": {
        "id": "1513175",
        "title": "Gateway_ViewGetBrightnessContrast",
        "version": "17.4.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewGetBrightnessContrast",
        "example": "",
        "syntax": "",
        "docSyntax": "[viewID, callback_func] call Gateway_ViewSetBrightnessContrast",
        "parameters": [
            "viewID: Number - The View ID of the IG channel that you are requesting from.",
            "callback_func: String - The function that Gateway calls when it receives the IG response, formatting in the query ID and the response values into the callback.",
            "%1% is where the Query ID gets formatted into.\u00a0%2% is where the brightness value gets formatted into.\u00a0%3% is where the contrast value gets formatted into.",
            "%1% is where the Query ID gets formatted into.",
            "%2% is where the brightness value gets formatted into.",
            "%3% is where the contrast value gets formatted into."
        ],
        "return_value": [
            " Number or Boolean - Returns a Query ID that corresponds to this request. If the request is invalid, false is returned. "
        ]
    },
    "Gateway_ViewModify": {
        "id": "1509835",
        "title": "Gateway_ViewModify",
        "version": "3.8.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewModify",
        "example": "",
        "syntax": "",
        "docSyntax": "viewConfig call Gateway_ViewModify",
        "parameters": ["viewConfig: Array - The View Configuration (see description)."],
        "return_value": [
            "Boolean - Returns\u00a0true, if the view is successfully modified, false otherwise.",
            "String - An error message, if the view is not successfully modified."
        ]
    },
    "Gateway_ViewRemove": {
        "id": "1509832",
        "title": "Gateway_ViewRemove",
        "version": "3.8.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewRemove",
        "example": "",
        "syntax": "",
        "docSyntax": "viewIDs call Gateway_ViewRemove",
        "parameters": ["viewIDs: Array - The IDs of the views to remove."],
        "return_value": [
            "Boolean - true if the view was successfully removed, false otherwise.",
            "String - An error message, if the view was not successfully removed."
        ]
    },
    "Gateway_ViewSetBrightnessContrast": {
        "id": "1513177",
        "title": "Gateway_ViewSetBrightnessContrast",
        "version": "17.4.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewSetBrightnessContrast",
        "example": "",
        "syntax": "",
        "docSyntax": "[viewID, mode, brightness, contrast] call Gateway_ViewSetBrightnessContrast",
        "parameters": [
            "viewID: Number - The View ID of the IG channel that you are setting.",
            "mode: Number - The ID corresponding to the AutoContrast-AutoBrightness mode: 0 - AUTO_CONTRAST_AUTO_BRIGHTNESS 1 - AUTO_CONTRAST_MANUAL_BRIGHTNESS 2 - MANUAL_CONTRAST_AUTO_BRIGHTNESS 3 - MANUAL_CONTRAST_MANUAL_BRIGHTNESS",
            "0 - AUTO_CONTRAST_AUTO_BRIGHTNESS",
            "1 - AUTO_CONTRAST_MANUAL_BRIGHTNESS",
            "2 - MANUAL_CONTRAST_AUTO_BRIGHTNESS",
            "3 - MANUAL_CONTRAST_MANUAL_BRIGHTNESS",
            "brightness: Number - The brightness level ratio (range: 0 - 1).",
            "viewID: Number - The contrast (gain) ratio (range: 0 - 1)."
        ],
        "return_value": [" Boolean - Returns true, when successful, and false otherwise. "]
    },
    "Gateway_ViewSetDepthOfField": {
        "id": "1513179",
        "title": "Gateway_ViewSetDepthOfField",
        "version": "17.4.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewSetDepthOfField",
        "example": "",
        "syntax": "",
        "docSyntax": "[viewID, focus_dist, blur] call Gateway_ViewSetDepthOfField",
        "parameters": [
            "viewID: Number - The View ID of the IG channel that you are setting.",
            "focus_dist: Number - Focus distance: -1 - No override (default) 0 - Auto-focus >1 - Distance in meter",
            "-1 - No override (default)",
            "0 - Auto-focus",
            ">1 - Distance in meter",
            "blur: Number - Blur value: 0 - No blur 1 - Default blur >1 - Greater blur",
            "0 - No blur",
            "1 - Default blur",
            ">1 - Greater blur"
        ],
        "return_value": [" Boolean - Returns true, when successful, and false otherwise. "]
    },
    "Gateway_ViewSetRegionOfInterest": {
        "id": "1513181",
        "title": "Gateway_ViewSetRegionOfInterest",
        "version": "17.4.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewSetRegionOfInterest",
        "example": "",
        "syntax": "",
        "docSyntax": "[viewID, left, right, top, bottom] call Gateway_ViewSetRegionOfInterest",
        "parameters": [
            "viewID: Number - The View ID of the IG channel that you are setting.",
            "left: Number - Left ROI value (range 0 - 1).",
            "right: Number - Right ROI value (range: 0 - 1).",
            "top: Number - Top ROI value (range: 0 - 1).",
            "bottom: Number - Bottom ROI value (range: 0 - 1)."
        ],
        "return_value": [" Boolean - Returns true, when successful, and false otherwise. "]
    },
    "Gateway_ViewSetSensor": {
        "id": "1509833",
        "title": "Gateway_ViewSetSensor",
        "version": "3.8.1",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/Gateway_ViewSetSensor",
        "example": "",
        "syntax": "",
        "docSyntax": "[view_id, view_type, sensor_on, auto_gain_enable, polarity, track_polarity, gain, level, noise, bcm] call Gateway_ViewSetSensor",
        "parameters": [
            "view_id: Number - The ID of the view to set the sensor on.",
            "view_type: Number - The sensor type:0: OTW (No sensor)1: NV2: FLIR Green3: FLIR Black4: FLIR Red5: B/W6: Electro Optical7: View off",
            "0: OTW (No sensor)",
            "1: NV",
            "2: FLIR Green",
            "3: FLIR Black",
            "4: FLIR Red",
            "5: B/W",
            "6: Electro Optical",
            "7: View off",
            "sensor_on: Boolean - If true, the sensor is enabled. False blacks out the screen. (Optional, default: false)",
            "auto_gain_enable: Boolean - If true, the engine adjusts gain and level. False forces the user to set it themselves. (Optional, default: false)",
            "polarity: Number - 0 = White Hot, 1 = Black Hot. (Optional, default: 0)",
            "track_polarity: Number - 0 = Track White, 1 = Track Black. (Optional, default: 0)",
            "gain: Number - Sensor gain (0.0 - 1.0). (Optional, default: 0.0)",
            "level: Number - Sensor level (0.0 - 1.0). (Optional, default: 0.0)",
            "noise: Number - Sensor noise (0.0 - 1.0). (Optional, default: 0.0)",
            "bcm: Number - Brightness / Contrast mode. The value corresponds to the AutoContrast-AutoBrightness mode. When the brightness / contrast mode is specified, it overrides auto_gain_enable. (Optional) (V17.4.0+)"
        ],
        "return_value": ["Boolean - True if the operation is successful, false otherwise."]
    },
    "IG_CenterMotionDevice": {
        "id": "1512043",
        "title": "IG_CenterMotionDevice",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_CenterMotionDevice",
        "example": "",
        "syntax": "",
        "docSyntax": "[isEnabled, deviceID] call IG_CenterMotionDevice",
        "parameters": [
            "isEnabled: Boolean - Set to true/false to enable / disable boresight centering of the motion device.",
            "deviceID: Number - The ID of the device this command applies to (optional, default: 1)."
        ],
        "return_value": [
            " success: Boolean - Returns true if the device has been centered, false if it failed to center. "
        ]
    },
    "IG_ChangeView": {
        "id": "1512040",
        "title": "IG_ChangeView",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_ChangeView",
        "example": "",
        "syntax": "",
        "docSyntax": "[viewID] call IG_ChangeView",
        "parameters": ["viewID: Number - The ID for the channel view."],
        "return_value": [" success: Boolean - Returns true if successful, false if not. "]
    },
    "IG_DisplayDamage": {
        "id": "1512041",
        "title": "IG_DisplayDamage",
        "version": "1.0.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_DisplayDamage",
        "example": "",
        "syntax": "",
        "docSyntax": "[enable] call IG_DisplayDamage",
        "parameters": ["enable: Boolean - Set to true if enabled, false if not."],
        "return_value": [" success: Boolean - Returns true if successful, false if not. "]
    },
    "IG_EnableMotionTracking": {
        "id": "1512038",
        "title": "IG_EnableMotionTracking",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_EnableMotionTracking",
        "example": "",
        "syntax": "",
        "docSyntax": "[isEnabled, viewID, isViewGroup, deviceID] call IG_EnableMotionTracking",
        "parameters": [
            "isEnabled: Boolean - Set to true if motion tracking is enabled, false if it is disabled.",
            "viewID: Number - The IG view or group ID to enable / disable motion devices.",
            "isViewGroup: Boolean - Set to true if view ID is a group ID, false if individual (optional, default: false).",
            "deviceID: Number - The ID of the device this command applies to (optional, default: 1)."
        ],
        "return_value": [
            " success: Boolean - Returns true if motion tracking is successfully enabled / disabled, false if enabling / disabling fails. "
        ]
    },
    "IG_GetView": {
        "id": "1512039",
        "title": "IG_GetView",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_GetView",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call IG_GetView",
        "parameters": [""],
        "return_value": [" viewID: Number - The channel view ID. "]
    },
    "IG_LoadDatabase": {
        "id": "1512036",
        "title": "IG_LoadDatabase",
        "version": "2.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_LoadDatabase",
        "example": "",
        "syntax": "",
        "docSyntax": "[terrainName] call IG_LoadDatabase",
        "parameters": [
            "terrainName: String - The configured name of the terrain (this can be found in VBS by using worldName)."
        ],
        "return_value": [" Nothing "]
    },
    "IG_OnSetCameraInside": {
        "id": "1509830",
        "title": "IG_OnSetCameraInside",
        "version": "17.1.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_OnSetCameraInside",
        "example": "",
        "syntax": "",
        "docSyntax": "[inside] call IG_OnSetCameraInside",
        "parameters": [
            "inside: Boolean - Sets whether the camera should be treated as being inside (true) or outside (false) the vehicle. If inside, the object the camera is attached to is rendered in front of the rest of the scene."
        ],
        "return_value": [" Boolean - Returns true if the command is successful, false otherwise.  "]
    },
    "IG_Reset": {
        "id": "1512037",
        "title": "IG_Reset",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_Reset",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call IG_Reset",
        "parameters": [""],
        "return_value": [" success: Boolean - Returns true if successful, false if not. "]
    },
    "IG_UpdateCamera": {
        "id": "1512034",
        "title": "IG_UpdateCamera",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/IG_UpdateCamera",
        "example": "",
        "syntax": "",
        "docSyntax": "[groupID, [left, right, top, bottom], [x, y, z],[roll, pitch, yaw]] call IG_UpdateCamera",
        "parameters": [
            "groupID: Number - The ID of the camera group you are updating. This value can be zero to indicate the camera does not belong to a group.",
            "left: Number - The left frustum.",
            "right: Number - The right frustum.",
            "top: Number - The top frustum.",
            "bottom: Number - The bottom frustum.",
            "x: Number - The X position offset of the camera.",
            "y: Number - The Y position offset of the camera.",
            "z: Number - The Z position offset of the camera.",
            "roll: Number - The roll of the camera.",
            "pitch: Number - The pitch of the camera.",
            "yaw: Number - The yaw of the camera."
        ],
        "return_value": [" Nothing "]
    },
    "overload_enableOverloadPrevention": {
        "id": "1510629",
        "title": "overload_enableOverloadPrevention",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/overload_enableOverloadPrevention",
        "example": "",
        "syntax": "",
        "docSyntax": "[enable] call overload_enableOverloadPrevention",
        "parameters": ["enable: Boolean - Set to true to enable, false to disable."],
        "return_value": ["Nothing"]
    },
    "overload_getCurrentSettingLevel": {
        "id": "1510626",
        "title": "overload_getCurrentSettingLevel",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/overload_getCurrentSettingLevel",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call overload_getCurrentSettingLevel",
        "parameters": [""],
        "return_value": ["settingLevel: String - The current settings file, if valid and available."]
    },
    "overload_getDesiredFPS": {
        "id": "1510627",
        "title": "overload_getDesiredFPS",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/overload_getDesiredFPS",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call overload_getDesiredFPS",
        "parameters": [""],
        "return_value": ["fps: Number - The desired FPS."]
    },
    "overload_Reset": {
        "id": "1510656",
        "title": "overload_Reset",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/overload_Reset",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call overload_Reset",
        "parameters": [""],
        "return_value": ["Nothing"]
    },
    "overload_setCurrentSettingLevel": {
        "id": "1510657",
        "title": "overload_setCurrentSettingLevel",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/overload_setCurrentSettingLevel",
        "example": "",
        "syntax": "",
        "docSyntax": "[settingLevel] call overload_setCurrentSettingLevel",
        "parameters": ["settingLevel: String - The setting level, as defined in SyncOverload_Settings.xml."],
        "return_value": ["Nothing"]
    },
    "overload_setDesiredFPS": {
        "id": "1510654",
        "title": "overload_setDesiredFPS",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/overload_setDesiredFPS",
        "example": "",
        "syntax": "",
        "docSyntax": "[fps] call overload_setDesiredFPS",
        "parameters": ["fps: Number - The desired FPS."],
        "return_value": ["Nothing"]
    },
    "sync_getApertureSyncEnabled": {
        "id": "1510854",
        "title": "sync_getApertureSyncEnabled",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/sync_getApertureSyncEnabled",
        "example": "",
        "syntax": "",
        "docSyntax": "[] call sync_getApertureSyncEnabled",
        "parameters": [""],
        "return_value": ["success: Boolean - Returns true if enabled, false if disabled."]
    },
    "sync_setAperture": {
        "id": "1510855",
        "title": "sync_setAperture",
        "version": "2.2.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/sync_setAperture",
        "example": "",
        "syntax": "",
        "docSyntax": "[aperture] call sync_setAperture",
        "parameters": ["aperture: Number - The aperture value to be used."],
        "return_value": [" Nothing "]
    },
    "sync_setApertureSyncEnabled": {
        "id": "1510852",
        "title": "sync_setApertureSyncEnabled",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/sync_setApertureSyncEnabled",
        "example": "",
        "syntax": "",
        "docSyntax": "[enabled] call Sync_getApertureSyncEnabled",
        "parameters": ["enabled: Boolean - Set to true to enable aperture control, false to disable aperture control."],
        "return_value": [" Nothing "]
    },
    "sync_setEyeAccom": {
        "id": "1510853",
        "title": "sync_setEyeAccom",
        "version": "2.3.0",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/sync_setEyeAccom",
        "example": "",
        "syntax": "",
        "docSyntax": "[eyeAccom] call sync_setEyeAccom",
        "parameters": ["eyeAccom: Number - The HDR eye accommodation value to use."],
        "return_value": ["Nothing"]
    },
    "VBS Function Library": {
        "id": "1509012",
        "title": "VBS Function Library",
        "version": "",
        "tags": "",
        "description": "",
        "url": "https://sqf.bisimulations.com/display/SQF/VBS+Function+Library",
        "example": "",
        "syntax": "",
        "docSyntax": "",
        "parameters": "",
        "return_value": ""
    }
}
